code,label_E,label_W,label_R,label_X,label_CFP,pred_E,pred_W,pred_R,pred_X,pred_CFP,label_CFP_sum_from_parts,pred_CFP_sum_from_parts,label_CFP_rounded,pred_CFP_rounded
"def connect_options_namespaced_service_proxy(self, name, namespace, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.connect_options_namespaced_service_proxy_with_http_info(name, namespace, **kwargs)
        else:
            (data) = self.connect_options_namespaced_service_proxy_with_http_info(name, namespace, **kwargs)
            return data",2.0,0.0,0.0,1.0,3.0,0.9909634590148926,-0.01587367057800293,-0.038152288645505905,0.9753683805465698,2.1200246810913086,3.0,1.9123058803379536,3.0,2.0
"def select_flair(self, item, flair_template_id='', flair_text=''):
        data = {'flair_template_id': flair_template_id or '',
                'text':              flair_text or ''}
        if isinstance(item, objects.Submission):
            data['link'] = item.fullname
            evict = item.permalink
        else:
            data['name'] = self.user.name
            data['r'] = six.text_type(item)
            evict = self.config['flairlist'].format(
                subreddit=six.text_type(item))
        response = self.request_json(self.config['select_flair'], data=data)
        self.evict(evict)
        return response",2.0,0.0,0.0,2.0,4.0,0.8080205917358398,-0.038585711270570755,0.5229851603507996,0.9435484409332275,2.6361777782440186,4.0,2.235968481749296,4.0,3.0
"def send_reset_password_instructions(user):
    token = generate_reset_password_token(user)
    reset_link = url_for_security(
        'reset_password', token=token, _external=True
    )
    if config_value('SEND_PASSWORD_RESET_EMAIL'):
        _security.send_mail(config_value('EMAIL_SUBJECT_PASSWORD_RESET'),
                            user.email, 'reset_instructions',
                            user=user, reset_link=reset_link)
    reset_password_instructions_sent.send(
        app._get_current_object(), user=user, token=token
    )",1.0,0.0,1.0,0.0,2.0,1.0288814306259155,0.12393788248300552,0.2234642654657364,0.8947295546531677,2.3781120777130127,2.0,2.271013133227825,2.0,2.0
"def _get_base_model(self):
        if self.model_name == 'inception_v3':
            return InceptionV3(weights='imagenet', include_top=False)
        elif self.model_name == 'xception':
            return Xception(weights='imagenet', include_top=False)
        elif self.model_name == 'vgg16':
            return VGG16(weights='imagenet', include_top=False)
        elif self.model_name == 'vgg19':
            return VGG19(weights='imagenet', include_top=False)
        elif self.model_name == 'resnet50':
            return ResNet50(weights='imagenet', include_top=False)
        else:
            raise ValueError('Cannot find base model %s' % self.model_name)",0.0,0.0,0.0,1.0,1.0,0.8437687158584595,-0.030447252094745636,0.04856507480144501,0.8423425555229187,1.6247045993804932,1.0,1.7042290940880775,1.0,2.0
"def get_unread(self, include_me=False, include_notifications=False, use_unread_count=False):
        raw_message_groups = self.wapi_functions.getUnreadMessages(include_me, include_notifications, use_unread_count)
        unread_messages = []
        for raw_message_group in raw_message_groups:
            chat = factory_chat(raw_message_group, self)
            messages = [factory_message(message, self) for message in raw_message_group['messages']]
            messages.sort(key=lambda message: message.timestamp)
            unread_messages.append(MessageGroup(chat, messages))
        return unread_messages",2.0,0.0,0.0,1.0,3.0,1.2930564880371094,-0.036179207265377045,0.1430114358663559,1.038175106048584,2.71873140335083,3.0,2.438063822686672,3.0,3.0
"def read_priority_class(self, name, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_priority_class_with_http_info(name, **kwargs)
        else:
            (data) = self.read_priority_class_with_http_info(name, **kwargs)
            return data",1.0,0.0,0.0,2.0,3.0,1.096183180809021,-0.07634855806827545,-0.012512926012277603,1.0110894441604614,2.227278470993042,3.0,2.0184111408889294,3.0,2.0
"def table(self, name, database=None, schema=None):
        if database is not None and database != self.current_database:
            return self.database(name=database).table(name=name, schema=schema)
        else:
            alch_table = self._get_sqla_table(name, schema=schema)
            node = self.table_class(alch_table, self, self._schemas.get(name))
            return self.table_expr_class(node)",1.0,0.0,1.0,1.0,3.0,0.5931800007820129,0.08225872367620468,0.31624045968055725,0.6470592617988586,1.6007155179977417,3.0,1.6387384459376335,3.0,2.0
"def find(self, tname, where=None, where_not=None, columns=None, astype=None):
        try:
            tname = self._check_tname(tname, noload=True)
        except ValueError:
            return self._output(DataFrame(), astype=astype)
        where = PandasDatabase._check_conditions(where)
        where_not = PandasDatabase._check_conditions(where_not)
        columns = PandasDatabase._check_type_iter(str, columns)
        dataframe = self._db[tname]
        if len(columns) > 0 and len(dataframe) > 0:
            dataframe = dataframe[columns]
        if len(where) > 0:
            dataframe = dataframe[self._get_condition_mask(dataframe, where)]
        if len(where_not) > 0:
            dataframe = dataframe[~self._get_condition_mask(dataframe, where_not)]
        self._print('Found %d records in table ""%s"" where %r and where not %r'
                    % (len(dataframe), tname, where, where_not))
        return self._output(dataframe, astype=astype)",1.0,0.0,1.0,1.0,3.0,0.5993946194648743,-0.001553715206682682,0.28748688101768494,0.716967761516571,1.6381107568740845,3.0,1.6022955467924476,3.0,2.0
"def send_game(chat_id, game_name_short,
              disable_notification=False, reply_to_message_id=None, reply_markup=None, **kwargs):
    params = dict(chat_id=chat_id,
                  game_name_short=game_name_short)
    params.update(
        _clean_params(
            disable_notification=disable_notification,
            reply_to_message_id=reply_to_message_id,
            reply_markup=reply_markup,
        )
    )
    return TelegramBotRPCRequest('sendGame', params=params,
                                 on_result=Message.from_result, **kwargs)",1.0,0.0,0.0,2.0,3.0,1.3467563390731812,-0.045479916036129,-0.06605322659015656,1.1763365268707275,2.8066036701202393,3.0,2.411559723317623,3.0,3.0
"def update_data(ctx, models=True, pickles=False, f=False):
    if pickles:
        save_sql_to_files(f)
    if models:
        if f:
            manage(ctx, 'create_models_from_sql --force True', env={})
        else:
            manage(ctx, 'create_models_from_sql', env={})",1.0,1.0,1.0,0.0,3.0,0.5776021480560303,0.18500326573848724,0.21531891822814941,0.6449791789054871,1.6247057914733887,3.0,1.622903510928154,3.0,2.0
"def login(self, username='admin', password='admin'):
        self.session = requests.Session()
        login = self.session.post(self.url+'login',
                                  data={'username': username,
                                        'password': password})
        if login.text == 'Ok.':
            self._is_authenticated = True
        else:
            return login.text",2.0,0.0,0.0,2.0,4.0,1.5175809860229492,0.01333755161613226,0.048903122544288635,1.1193546056747437,2.931225538253784,4.0,2.6991762658581138,4.0,3.0
"def get_all_assignable_users_for_project(self, project_key, start=0, limit=50):
        url = 'rest/api/2/user/assignable/search?project={project_key}&startAt={start}&maxResults={limit}'.format(
            project_key=project_key,
            start=start,
            limit=limit)
        return self.get(url)",2.0,0.0,0.0,1.0,3.0,1.9224270582199097,-0.09908818453550339,0.10345432162284851,1.1071072816848755,3.1517410278320312,3.0,3.0339004769921303,3.0,3.0
"def create_session(self, username, prekeybundle, autotrust=False):
        logger.debug(""create_session(username=%s, prekeybunder=[omitted], autotrust=%s)"" % (username, autotrust))
        session_builder = SessionBuilder(self._store, self._store, self._store, self._store, username, 1)
        try:
            session_builder.processPreKeyBundle(prekeybundle)
        except UntrustedIdentityException as ex:
            if autotrust:
                self.trust_identity(ex.getName(), ex.getIdentityKey())
            else:
                raise exceptions.UntrustedIdentityException(ex.getName(), ex.getIdentityKey())",0.0,0.0,0.0,0.0,0.0,0.7680337429046631,0.02694489061832428,0.07908500730991364,0.8045583367347717,1.6645987033843994,0.0,1.6786219775676727,0.0,2.0
"def reindex(self, mode, includes=""""):
        url = self._url + ""/indexer/reindex""
        params = {
            ""f"" : ""json"",
            ""mode"" : mode,
            ""includes"" : includes
        }
        return self._get(url=url,
                            param_dict=params,
                            securityHandler=self._securityHandler,
                            proxy_port=self._proxy_port,
                            proxy_url=self._proxy_url)",2.0,0.0,0.0,2.0,4.0,1.4619717597961426,-0.026358775794506073,-0.021864518523216248,1.0133297443389893,2.713674306869507,4.0,2.4270782098174095,4.0,3.0
"def mark_as_nsfw(self, unmark_nsfw=False):
        def mark_as_nsfw_helper(self):
            url = self.reddit_session.config['unmarknsfw' if unmark_nsfw else
                                             'marknsfw']
            data = {'id': self.fullname}
            return self.reddit_session.request_json(url, data=data)
        is_author = (self.reddit_session.is_logged_in() and self.author ==
                     self.reddit_session.user)
        if is_author:
            return mark_as_nsfw_helper(self)
        else:
            return restrict_access('modposts')(mark_as_nsfw_helper)(self)",1.0,0.0,0.0,2.0,3.0,1.5042707920074463,-0.0023079002276062965,0.00492776557803154,1.1370431184768677,2.8219878673553467,3.0,2.643933775834739,3.0,3.0
"def report(self, message, http_context=None, user=None):
        stack = traceback.extract_stack()
        last_call = stack[-2]
        file_path = last_call[0]
        line_number = last_call[1]
        function_name = last_call[2]
        report_location = {
            ""filePath"": file_path,
            ""lineNumber"": line_number,
            ""functionName"": function_name,
        }
        self._send_error_report(
            message,
            http_context=http_context,
            user=user,
            report_location=report_location,
        )",0.0,0.0,0.0,1.0,1.0,0.9172583222389221,-0.05572663992643356,-0.0008596889674663544,1.029646396636963,1.8785923719406128,1.0,1.890318389981985,1.0,2.0
"def host_install(self, user_name, host_names, ssh_port=None, password=None,
          private_key=None, passphrase=None, parallel_install_count=None,
          cm_repo_url=None, gpg_key_custom_url=None,
          java_install_strategy=None, unlimited_jce=None):
    host_install_args = {}
    if user_name:
     host_install_args['userName'] = user_name
    if host_names:
      host_install_args['hostNames'] = host_names
    if ssh_port:
     host_install_args['sshPort'] = ssh_port
    if password:
     host_install_args['password'] = password
    if private_key:
     host_install_args['privateKey'] = private_key
    if passphrase:
     host_install_args['passphrase'] = passphrase
    if parallel_install_count:
     host_install_args['parallelInstallCount'] = parallel_install_count
    if cm_repo_url:
     host_install_args['cmRepoUrl'] = cm_repo_url
    if gpg_key_custom_url:
     host_install_args['gpgKeyCustomUrl'] = gpg_key_custom_url
    if java_install_strategy is not None:
     host_install_args['javaInstallStrategy'] = java_install_strategy
    if unlimited_jce:
     host_install_args['unlimitedJCE'] = unlimited_jce
    return self._cmd('hostInstall', data=host_install_args)",1.0,0.0,0.0,2.0,3.0,1.1747536659240723,-0.0218978151679039,0.025073416531085968,1.0635513067245483,2.1647255420684814,3.0,2.2414805740118027,3.0,2.0
"def on_select_high_level(self,event,called_by_parent=False):
        UPPER_LEVEL=self.level_box.GetValue()
        if UPPER_LEVEL=='sample':
            self.level_names.SetItems(self.parent.samples)
            self.level_names.SetStringSelection(self.parent.Data_hierarchy['sample_of_specimen'][self.parent.s])
        if UPPER_LEVEL=='site':
            self.level_names.SetItems(self.parent.sites)
            self.level_names.SetStringSelection(self.parent.Data_hierarchy['site_of_specimen'][self.parent.s])
        if UPPER_LEVEL=='location':
            self.level_names.SetItems(self.parent.locations)
            self.level_names.SetStringSelection(self.parent.Data_hierarchy['location_of_specimen'][self.parent.s])
        if UPPER_LEVEL=='study':
            self.level_names.SetItems(['this study'])
            self.level_names.SetStringSelection('this study')
        if not called_by_parent:
            self.parent.level_box.SetStringSelection(UPPER_LEVEL)
            self.parent.onSelect_high_level(event,True)
        self.on_select_level_name(event)",1.0,0.0,0.0,1.0,2.0,0.8178601264953613,-0.12584061920642853,0.08960700035095215,0.87056964635849,1.8224369287490845,2.0,1.652196153998375,2.0,2.0
"async def get_authenticated_user(
        self, redirect_uri: str, code: str
    ) -> Dict[str, Any]:
        handler = cast(RequestHandler, self)
        http = self.get_auth_http_client()
        body = urllib.parse.urlencode(
            {
                ""redirect_uri"": redirect_uri,
                ""code"": code,
                ""client_id"": handler.settings[self._OAUTH_SETTINGS_KEY][""key""],
                ""client_secret"": handler.settings[self._OAUTH_SETTINGS_KEY][""secret""],
                ""grant_type"": ""authorization_code"",
            }
        )
        response = await http.fetch(
            self._OAUTH_ACCESS_TOKEN_URL,
            method=""POST"",
            headers={""Content-Type"": ""application/x-www-form-urlencoded""},
            body=body,
        )
        return escape.json_decode(response.body)",2.0,0.0,0.0,1.0,3.0,1.0781853199005127,-0.06177765130996704,0.004240948706865311,1.0296217203140259,2.110402822494507,3.0,2.050270337611437,3.0,2.0
"def retrieve(self, request, *args, **kwargs):
        data = UserSerializer().to_representation(request.user)
        if request.user.is_superuser:
            data['is_superuser'] = True
        secret = getattr(settings, 'FIREBASE_SECRET', None)
        if secret:
            firebase_auth_payload = {
                'id': request.user.pk,
                'username': request.user.username,
                'email': request.user.email,
                'is_staff': request.user.is_staff
            }
            data['firebase_token'] = create_token(secret, firebase_auth_payload)
        return Response(data)",1.0,0.0,1.0,1.0,3.0,0.8814008235931396,-0.02004057541489601,0.3027976453304291,0.923685610294342,2.308563232421875,3.0,2.0878435038030148,3.0,2.0
"def GetSavename(default=None, **kwargs):
    args = ['--save']
    if default:
        args.append('--filename=%s' % default)
    for generic_args in kwargs_helper(kwargs):
        args.append('--%s=%s' % generic_args)
    p = run_zenity('--file-selection', *args)
    if p.wait() == 0:
        return p.stdout.read().strip().split('|')",1.0,0.0,0.0,1.0,2.0,0.9391456246376038,-0.003942505456507206,0.022000137716531754,0.9115387797355652,1.8667818307876587,2.0,1.8687420366331935,2.0,2.0
"def share_pull_request(self, user_message, repository_id, pull_request_id, project=None):
        route_values = {}
        if project is not None:
            route_values['project'] = self._serialize.url('project', project, 'str')
        if repository_id is not None:
            route_values['repositoryId'] = self._serialize.url('repository_id', repository_id, 'str')
        if pull_request_id is not None:
            route_values['pullRequestId'] = self._serialize.url('pull_request_id', pull_request_id, 'int')
        content = self._serialize.body(user_message, 'ShareNotificationContext')
        self._send(http_method='POST',
                   location_id='696f3a82-47c9-487f-9117-b9d00972ca84',
                   version='5.0-preview.1',
                   route_values=route_values,
                   content=content)",1.0,0.0,0.0,1.0,2.0,1.4327951669692993,5.706213414669037e-06,-0.019171565771102905,1.1386395692825317,2.895480155944824,2.0,2.552268876694143,2.0,3.0
"def compute_log_likelihood(ll_func, parameters, data=None, cl_runtime_info=None):
    def get_cl_function():
        nmr_params = parameters.shape[1]
        if len(parameters.shape) > 2:
            return SimpleCLFunction.from_string( + str(nmr_params) +  + str(parameters.shape[2]) +  + str(nmr_params) +  + str(parameters.shape[2]) +  + ll_func.get_cl_function_name() + , dependencies=[ll_func])
        return SimpleCLFunction.from_string( + ll_func.get_cl_function_name() + , dependencies=[ll_func])
    kernel_data = {'data': data,
                   'parameters': Array(parameters, 'mot_float_type', mode='r')}
    shape = parameters.shape
    if len(shape) > 2:
        kernel_data.update({
            'log_likelihoods': Zeros((shape[0], shape[2]), 'mot_float_type'),
        })
    else:
        kernel_data.update({
            'log_likelihoods': Zeros((shape[0],), 'mot_float_type'),
        })
    get_cl_function().evaluate(kernel_data, parameters.shape[0], use_local_reduction=True,
                               cl_runtime_info=cl_runtime_info)
    return kernel_data['log_likelihoods'].get_data()",0.0,0.0,0.0,1.0,1.0,0.6874379515647888,-0.059305958449840546,-0.043465856462717056,0.8962515592575073,1.3702619075775146,1.0,1.4809176959097385,1.0,1.0
"def make_client(zhmc, userid=None, password=None):
    global USERID, PASSWORD
    USERID = userid or USERID or \
        six.input('Enter userid for HMC {}: '.format(zhmc))
    PASSWORD = password or PASSWORD or \
        getpass.getpass('Enter password for {}: '.format(USERID))
    session = zhmcclient.Session(zhmc, USERID, PASSWORD)
    session.logon()
    client = zhmcclient.Client(session)
    print('Established logged-on session with HMC {} using userid {}'.
          format(zhmc, USERID))
    return client",1.0,0.0,0.0,2.0,3.0,1.1779354810714722,0.06203465908765793,0.13251623511314392,0.8953607678413391,2.3788905143737793,3.0,2.267847143113613,3.0,2.0
"def estimator_status_send(self, time_usec, flags, vel_ratio, pos_horiz_ratio, pos_vert_ratio, mag_ratio, hagl_ratio, tas_ratio, pos_horiz_accuracy, pos_vert_accuracy, force_mavlink1=False):
                return self.send(self.estimator_status_encode(time_usec, flags, vel_ratio, pos_horiz_ratio, pos_vert_ratio, mag_ratio, hagl_ratio, tas_ratio, pos_horiz_accuracy, pos_vert_accuracy), force_mavlink1=force_mavlink1)",0.0,0.0,0.0,1.0,1.0,0.8123590350151062,-0.140499085187912,-0.11081370711326599,0.9781538248062134,1.7996116876602173,1.0,1.5392000675201416,1.0,2.0
"def create_jwt(self, expires_in=None):
        s = utils.sign_jwt(data={""id"": self.user.id},
                           secret_key=get_jwt_secret(),
                           salt=get_jwt_salt(),
                           expires_in=expires_in or get_jwt_ttl())
        return s",1.0,0.0,0.0,1.0,2.0,0.8012276887893677,0.03198195993900299,0.11593818664550781,0.8675543665885925,1.8948466777801514,2.0,1.816702201962471,2.0,2.0
"def send_file(self, sender, receiver_type, receiver_id, media_id):
        data = {
            'receiver': {
                'type': receiver_type,
                'id': receiver_id,
            },
            'sender': sender,
            'msgtype': 'file',
            'file': {
                'media_id': media_id,
            }
        }
        return self._post('chat/send', data=data)",1.0,0.0,0.0,1.0,2.0,1.253283977508545,-0.05284392833709717,-0.025543611496686935,1.1073085069656372,2.9288175106048584,2.0,2.282204944640398,2.0,3.0
"def status(self):
        task_id = self.request.id
        try:
            return UserTaskStatus.objects.get(task_id=task_id)
        except UserTaskStatus.DoesNotExist:
            arguments_dict = self.arguments_as_dict(*self.request.args, **self.request.kwargs)
            name = self.generate_name(arguments_dict)
            task_class = '.'.join([self.__class__.__module__, self.__class__.__name__])
            total_steps = self.calculate_total_steps(arguments_dict)
            user_id = arguments_dict['user_id']
            return UserTaskStatus.objects.get_or_create(
                task_id=task_id, defaults={'user_id': user_id, 'name': name, 'task_class': task_class,
                                           'total_steps': total_steps})[0]",1.0,0.0,1.0,1.0,3.0,0.7891446948051453,-0.04304181784391403,0.791537880897522,0.9253882765769958,2.9119770526885986,3.0,2.463029034435749,3.0,3.0
"def get_google_playlist(self, playlist):
		logger.info(""Loading playlist {0}"".format(playlist))
		for google_playlist in self.api.get_all_user_playlist_contents():
			if google_playlist['name'] == playlist or google_playlist['id'] == playlist:
				return google_playlist
		else:
			logger.warning(""Playlist {0} does not exist."".format(playlist))
			return {}",2.0,0.0,0.0,1.0,3.0,1.6104516983032227,-0.045133061707019806,0.22230494022369385,1.00373375415802,3.0379645824432373,3.0,2.7913573309779167,3.0,3.0
"def upsert_entity_relationships(self, queryset, entity_relationships):
        if entity_relationships:
            list(queryset.select_for_update().values_list(
                'id',
                flat=True
            ))
        return manager_utils.sync(
            queryset=queryset,
            model_objs=entity_relationships,
            unique_fields=['sub_entity_id', 'super_entity_id'],
            update_fields=[],
            return_upserts=True
        )",0.0,1.0,1.0,0.0,2.0,0.2728334963321686,0.4028930366039276,0.958625316619873,0.6600248217582703,2.364023208618164,2.0,2.2943766713142395,2.0,2.0
"def patch_mutating_webhook_configuration(self, name, body, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_mutating_webhook_configuration_with_http_info(name, body, **kwargs)
        else:
            (data) = self.patch_mutating_webhook_configuration_with_http_info(name, body, **kwargs)
            return data",1.0,0.0,0.0,2.0,3.0,0.8021811246871948,0.05945582687854767,-0.07069636881351471,0.9841406345367432,1.9950448274612427,3.0,1.775081217288971,3.0,2.0
"def delete(self, config_file=None):
        path_to_remove = config_file or _DEFAULT_PATH
        try:
            os.remove(path_to_remove)
            print('Credentials at {} successfully removed.'.format(
                path_to_remove))
        except OSError as err:
            warnings.warn('No credential file found at {}.'.format(
                path_to_remove))",1.0,0.0,0.0,1.0,2.0,0.8869327306747437,0.039830684661865234,0.008878029882907867,0.8388341069221497,1.7369201183319092,2.0,1.7744755521416664,2.0,2.0
"def selected_canvas_hazlayer(self):
        if self.lstCanvasHazLayers.selectedItems():
            item = self.lstCanvasHazLayers.currentItem()
        else:
            return None
        try:
            layer_id = item.data(Qt.UserRole)
        except (AttributeError, NameError):
            layer_id = None
        layer = QgsProject.instance().mapLayer(layer_id)
        return layer",1.0,0.0,1.0,0.0,2.0,0.8717347383499146,-0.1082877367734909,0.14209091663360596,0.9727452993392944,2.040381669998169,2.0,1.878283217549324,2.0,2.0
"def from_utc_timestamp(timestamp, tz):
    warnings.warn(""Deprecated in 3.0. See SPARK-25496"", DeprecationWarning)
    sc = SparkContext._active_spark_context
    if isinstance(tz, Column):
        tz = _to_java_column(tz)
    return Column(sc._jvm.functions.from_utc_timestamp(_to_java_column(timestamp), tz))",1.0,0.0,0.0,1.0,2.0,0.6614257097244263,-0.005770021118223667,0.10343487560749054,0.6630845069885254,1.4889627695083618,2.0,1.4221750712022185,2.0,1.0
"def get_char(prompt=None):
    while True:
        s = get_string(prompt)
        if s is None:
            return None
        if len(s) == 1:
            return s[0]
        if prompt is None:
            print(""Retry: "", end="""")",1.0,0.0,0.0,1.0,2.0,0.9739660620689392,-0.07022479176521301,-0.01079823449254036,0.9528027176856995,1.8327856063842773,2.0,1.8457457534968853,2.0,2.0
"async def reset_state(self, *,
                          chat: typing.Union[str, int, None] = None,
                          user: typing.Union[str, int, None] = None,
                          with_data: typing.Optional[bool] = True):
        chat, user = self.check_address(chat=chat, user=user)
        await self.set_state(chat=chat, user=user, state=None)
        if with_data:
            await self.set_data(chat=chat, user=user, data={})",0.0,1.0,1.0,0.0,2.0,0.9671052694320679,-0.016610465943813324,-0.011958174407482147,1.042332410812378,2.0253496170043945,2.0,1.9808690398931503,2.0,2.0
"def get_chat_members_count(
        self,
        chat_id: Union[int, str]
    ) -> int:
        peer = self.resolve_peer(chat_id)
        if isinstance(peer, types.InputPeerChat):
            return self.send(
                functions.messages.GetChats(
                    id=[peer.chat_id]
                )
            ).chats[0].participants_count
        elif isinstance(peer, types.InputPeerChannel):
            return self.send(
                functions.channels.GetFullChannel(
                    channel=peer
                )
            ).full_chat.participants_count
        else:
            raise ValueError(""The chat_id \""{}\"" belongs to a user"".format(chat_id))",0.0,0.0,0.0,1.0,1.0,1.4958966970443726,-0.1357511579990387,0.2522660791873932,1.1103848218917847,2.9583444595336914,1.0,2.7227964401245117,1.0,3.0
"def add_user(self, username, email, **kwargs):
        api = self._get_api(iam.AccountAdminApi)
        kwargs.update({'username': username, 'email': email})
        user = User._create_request_map(kwargs)
        body = iam.UserUpdateReq(**user)
        return User(api.create_user(body))",1.0,1.0,0.0,2.0,4.0,1.248887062072754,0.049031421542167664,0.11225014925003052,1.235122799873352,3.1037089824676514,4.0,2.645291432738304,4.0,3.0
"def delete_tag(self, project, repository, tag_name):
        url = 'rest/git/1.0/projects/{project}/repos/{repository}/tags/{tag}'.format(project=project,
                                                                                     repository=repository,
                                                                                     tag=tag_name)
        return self.delete(url)",1.0,0.0,0.0,1.0,2.0,1.1045135259628296,-0.023175567388534546,-0.032204996794462204,0.9572164416313171,2.2885258197784424,2.0,2.00634940341115,2.0,2.0
"def editAccountInfo(self, short_name=None, author_name=None, author_url=None):
        return self.make_method(""editAccountInfo"", {
            ""access_token"": self.access_token,
            ""short_name"": short_name,
            ""author_name"": author_name,
            ""author_url"": author_url
        })",1.0,0.0,0.0,2.0,3.0,1.3746767044067383,0.01579596847295761,-0.08258271217346191,1.0817962884902954,2.6488382816314697,3.0,2.3896862491965294,3.0,3.0
"def deleteResourceFile(self, pid, filename):
        url = ""{url_base}/resource/{pid}/files/{filename}"".format(url_base=self.url_base,
                                                                  pid=pid,
                                                                  filename=filename)
        r = self._request('DELETE', url)
        if r.status_code != 200:
            if r.status_code == 403:
                raise HydroShareNotAuthorized(('DELETE', url))
            elif r.status_code == 404:
                raise HydroShareNotFound((pid, filename))
            else:
                raise HydroShareHTTPException((url, 'DELETE', r.status_code))
        response = r.json()
        assert(response['resource_id'] == pid)
        return response['resource_id']",2.0,0.0,0.0,2.0,4.0,1.1764315366744995,-0.006069027818739414,-0.002305414527654648,0.9756616353988647,2.4160521030426025,4.0,2.14371872972697,4.0,2.0
"def add_device_notification(self, data_name, attr, callback, user_handle=None):
        if self._port is not None:
            notification_handle, user_handle = adsSyncAddDeviceNotificationReqEx(
                self._port, self._adr, data_name, attr, callback, user_handle
            )
            return notification_handle, user_handle
        return None",2.0,0.0,0.0,1.0,3.0,0.9645390510559082,-0.015046239830553532,-0.09604999423027039,1.0921381711959839,2.288691282272339,3.0,1.9455809881910682,3.0,2.0
"def post_signup(self, user, login_user=None, send_email=None):
        self.signup_signal.send(self, user=user)
        if (login_user is None and self.options[""login_user_on_signup""]) or login_user:
            self._login(user, user.signup_provider)
        to_email = getattr(user, self.options[""email_column""], None)
        if to_email and ((send_email is None and self.options[""send_welcome_email""]) or send_email):
            template = ""users/welcome.txt"" if self.options[""send_welcome_email""] == True else self.options[""send_welcome_email""]
            current_app.features.emails.send(to_email, template, user=user)",1.0,0.0,0.0,1.0,2.0,0.9644117951393127,-0.02701355516910553,0.16257993876934052,0.9192034602165222,2.1641101837158203,2.0,2.01918163895607,2.0,2.0
"def authenticate_redirect(
        self, callback_uri=None, ax_attrs=[""name"", ""email"", ""language"",
                                           ""username""]):
        callback_uri = callback_uri or self.request.uri
        args = self._openid_args(callback_uri, ax_attrs=ax_attrs)
        self.redirect(self._OPENID_ENDPOINT + ""?"" + urllib.urlencode(args))",2.0,0.0,0.0,1.0,3.0,1.2260189056396484,-0.025584854185581207,-0.05499879643321037,1.024417519569397,2.330192804336548,3.0,2.169852774590254,3.0,2.0
"def download_storyitem(self, item: StoryItem, target: str) -> bool:
        date_local = item.date_local
        dirname = _PostPathFormatter(item).format(self.dirname_pattern, target=target)
        filename = dirname + '/' + self.format_filename(item, target=target)
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        downloaded = False
        if not item.is_video or self.download_video_thumbnails is True:
            url = item.url
            downloaded = self.download_pic(filename=filename, url=url, mtime=date_local)
        if item.is_video and self.download_videos is True:
            downloaded |= self.download_pic(filename=filename, url=item.video_url, mtime=date_local)
        metadata_string = _ArbitraryItemFormatter(item).format(self.storyitem_metadata_txt_pattern).strip()
        if metadata_string:
            self.save_caption(filename=filename, mtime=item.date_local, caption=metadata_string)
        if self.save_metadata is not False:
            self.save_metadata_json(filename, item)
        self.context.log()
        return downloaded",2.0,0.0,0.0,0.0,2.0,0.8774533271789551,-0.034591227769851685,0.02220536395907402,0.8523290753364563,1.8454302549362183,2.0,1.7173965387046337,2.0,2.0
"def requestFields(self, field_names, required=False, strict=False):
        if isinstance(field_names, basestring):
            raise TypeError('Fields should be passed as a list of '
                            'strings (not %r)' % (type(field_names),))
        for field_name in field_names:
            self.requestField(field_name, required, strict=strict)",1.0,0.0,0.0,0.0,1.0,0.8079468011856079,-0.09224101155996323,-0.0002317875623703003,0.8622059226036072,1.6365373134613037,1.0,1.5776799246668816,1.0,2.0
"def wait_for(self, event, *, check=None, timeout=None):
        future = self.loop.create_future()
        if check is None:
            def _check(*args):
                return True
            check = _check
        ev = event.lower()
        try:
            listeners = self._listeners[ev]
        except KeyError:
            listeners = []
            self._listeners[ev] = listeners
        listeners.append((future, check))
        return asyncio.wait_for(future, timeout, loop=self.loop)",1.0,0.0,0.0,1.0,2.0,0.8104761838912964,-0.061868831515312195,0.043007828295230865,0.9094946980476379,1.712321162223816,2.0,1.701109878718853,2.0,2.0
"def mfe_multi(self, strands, permutation=None, degenerate=False, temp=37.0,
                  pseudo=False, material=None, dangles='some', sodium=1.0,
                  magnesium=0.0):
        material = self._set_material(strands, material, multi=True)
        cmd_args = self._prep_cmd_args(temp, dangles, material, pseudo, sodium,
                                       magnesium, multi=True)
        if degenerate:
            cmd_args.append('-degenerate')
        if permutation is None:
            permutation = range(1, len(strands) + 1)
        lines = self._multi_lines(strands, permutation)
        self._run('mfe', cmd_args, lines)
        structures = self._process_mfe(self._read_tempfile('mfe.mfe'))
        if degenerate:
            return structures
        else:
            return structures[0]",1.0,0.0,0.0,1.0,2.0,0.8080521821975708,-0.08011898398399353,-0.007386978715658188,0.8921493887901306,1.6166863441467285,2.0,1.6126956082880497,2.0,2.0
"def standard_suggestions(self):
        suggestions = BulletedList()
        suggestions.add(
            'Check that you have the latest version of InaSAFE installed '
            '- you may have encountered a bug that is fixed in a '
            'subsequent release.')
        suggestions.add(
            'Check the InaSAFE documentation to see if you are trying to '
            'do something unsupported.')
        suggestions.add(
            'Report the problem using the issue tracker at '
            'https://github.com/inasafe/inasafe/issues. Reporting an issue '
            'requires that you first create a free account at '
            'http://github.com. When you report the issue, '
            'please copy and paste the complete contents of this panel '
            'into the issue to ensure the best possible chance of getting '
            'your issue resolved.')
        suggestions.add(
            'Try contacting one of the InaSAFE development team by '
            'sending an email to info@inasafe.org. Please ensure that you '
            'copy and paste the complete contents of this panel into the '
            'email.')
        return suggestions",1.0,0.0,0.0,1.0,2.0,1.013964056968689,-0.008091487921774387,0.03655613958835602,0.9438705444335938,1.9033904075622559,2.0,1.9862992530688643,2.0,2.0
"def profile_list(request, page=1, template_name='userena/profile_list.html',
                 paginate_by=50, extra_context=None, **kwargs):
    warnings.warn(""views.profile_list is deprecated. Use ProfileListView instead"", DeprecationWarning, stacklevel=2)
    try:
        page = int(request.GET.get('page', None))
    except (TypeError, ValueError):
        page = page
    if userena_settings.USERENA_DISABLE_PROFILE_LIST \
       and not request.user.is_staff:
        raise Http404
    profile_model = get_profile_model()
    queryset = profile_model.objects.get_visible_profiles(request.user)
    if not extra_context: extra_context = dict()
    return ProfileListView.as_view(queryset=queryset,
                                   paginate_by=paginate_by,
                                   page=page,
                                   template_name=template_name,
                                   extra_context=extra_context,
                                   **kwargs)(request)",1.0,0.0,1.0,1.0,3.0,1.1991002559661865,-0.0765165388584137,0.5071381330490112,1.0385624170303345,2.9677679538726807,3.0,2.6682842671871185,3.0,3.0
"def hl_canvas2table(self, canvas, button, data_x, data_y):
        self.treeview.clear_selection()
        if self.maskhltag:
            try:
                canvas.delete_object_by_tag(self.maskhltag, redraw=True)
            except Exception:
                pass
        try:
            obj = canvas.get_object_by_tag(self.masktag)
        except Exception:
            return
        if obj.kind != 'compound':
            return
        if len(self._maskobjs) == 0:
            return
        for i, mobj in enumerate(self._maskobjs):
            mask1 = self._rgbtomask(mobj)
            if mask1[int(data_y), int(data_x)]:
                self._highlight_path(self._treepaths[i])",1.0,0.0,0.0,1.0,2.0,0.6521298885345459,-0.010755144990980625,0.21129678189754486,0.9014493823051453,1.8738739490509033,2.0,1.7541209077462554,2.0,2.0
"def get_authentic_node_name(self, node_name: str) -> Optional[str]:
        vertex: IGraphVertex = None
        try:
            vertex: IGraphVertex = self._wrapped_graph.vs.find(node_name)
        except ValueError:
            pass
        if vertex is None:
            try:
                vertex: IGraphVertex = self._wrapped_graph.vs[int(node_name)]
            except ValueError:
                return None
            except IndexError:
                return None
        try:
            return vertex[""name""]
        except KeyError:
            return str(vertex.index)",1.0,0.0,1.0,1.0,3.0,0.7889779210090637,-0.08855877071619034,0.05567474290728569,0.8928444981575012,1.5559513568878174,3.0,1.6489383913576603,3.0,2.0
"def search_reports(self, search_term=None,
                       enclave_ids=None,
                       from_time=None,
                       to_time=None,
                       tags=None,
                       excluded_tags=None):
        return Page.get_generator(page_generator=self._search_reports_page_generator(search_term, enclave_ids,
                                                                                     from_time, to_time, tags,
                                                                                     excluded_tags))",2.0,0.0,0.0,1.0,3.0,1.557317852973938,-0.17844639718532562,0.24816584587097168,1.078465223312378,2.7796847820281982,3.0,2.705502524971962,3.0,3.0
"def upload_file(self, api_token, file_path, **kwargs):
        params = {
            'token': api_token,
            'file_name': os.path.basename(file_path)
        }
        with open(file_path, 'rb') as f:
            files = {'file': f}
            return self._post('upload_file', params, files, **kwargs)",1.0,0.0,0.0,1.0,2.0,1.319612741470337,-0.002536230720579624,-0.06586764752864838,1.0770444869995117,2.861567735671997,2.0,2.3282533502206206,2.0,3.0
"def list_user_requests_view(request, targetUsername):
    if targetUsername == request.user.username:
        return list_my_requests_view(request)
    targetUser = get_object_or_404(User, username=targetUsername)
    targetProfile = get_object_or_404(UserProfile, user=targetUser)
    page_name = ""{0}'s Requests"".format(targetUsername)
    requests = Request.objects.filter(owner=targetProfile).exclude(
        ~Q(owner__user=request.user), private=True,
        )
    return render_to_response('list_requests.html', {
        'page_name': page_name,
        'requests': requests,
        'targetUsername': targetUsername,
        }, context_instance=RequestContext(request))",1.0,0.0,1.0,1.0,3.0,1.1930826902389526,-0.053197652101516724,0.7748860716819763,1.0129177570343018,3.2951889038085938,3.0,2.927688866853714,3.0,3.0
"def ParseConversationRow(self, parser_mediator, query, row, **unused_kwargs):
    query_hash = hash(query)
    event_data = TangoAndroidConversationEventData()
    event_data.conversation_identifier = self._GetRowValue(
        query_hash, row, 'conv_id')
    date_time = dfdatetime_semantic_time.NotSet()
    event = time_events.DateTimeValuesEvent(
        date_time, definitions.TIME_DESCRIPTION_NOT_A_TIME)
    parser_mediator.ProduceEventWithEventData(event, event_data)",0.0,1.0,0.0,0.0,1.0,0.6496981382369995,-0.0006852010264992714,0.4020237326622009,0.862183153629303,2.300618886947632,1.0,1.9132198235020041,1.0,2.0
"def flash(message, category='message'):
    flashes = session.get('_flashes', [])
    flashes.append((category, message))
    session['_flashes'] = flashes
    message_flashed.send(current_app._get_current_object(),
                         message=message, category=category)",1.0,0.0,0.0,1.0,2.0,0.8033395409584045,0.0388767346739769,0.16258373856544495,0.8425544500350952,2.044177770614624,2.0,1.8473544642329216,2.0,2.0
"def wsgi_middleware(self, app, cors=False):
        _app = StaticServerMiddleware(app, '/' + self.prefix, self.path,
                                      cors=self.cors)
        def app(environ, start_response):
            if not hasattr(self, 'host_url'):
                self.host_url = (environ['wsgi.url_scheme'] + '://' +
                                 environ['HTTP_HOST'] + '/')
            return _app(environ, start_response)
        return app",1.0,0.0,0.0,1.0,2.0,0.8066217303276062,-0.06672362983226776,-0.043137770146131516,0.8434494733810425,1.5411779880523682,2.0,1.5402098037302494,2.0,2.0
"def _check_db_exists(self, instance):
        dsn, host, username, password, database, driver = self._get_access_info(instance, self.DEFAULT_DB_KEY)
        context = ""{} - {}"".format(host, database)
        if self.existing_databases is None:
            cursor = self.get_cursor(instance, None, self.DEFAULT_DATABASE)
            try:
                self.existing_databases = {}
                cursor.execute(DATABASE_EXISTS_QUERY)
                for row in cursor:
                    self.existing_databases[row.name] = True
            except Exception as e:
                self.log.error(""Failed to check if database {} exists: {}"".format(database, e))
                return False, context
            finally:
                self.close_cursor(cursor)
        return database in self.existing_databases, context",0.0,1.0,1.0,0.0,2.0,0.35823339223861694,0.24613934755325317,0.6224574446678162,0.5339155793190002,1.8190838098526,2.0,1.7607457637786865,2.0,2.0
"def put_name(self, type_, id_, name):
        cachefile = self.filename(type_, id_)
        dirname = os.path.dirname(cachefile)
        try:
            os.makedirs(dirname)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise
        with open(cachefile, 'w') as f:
            f.write(name)",1.0,0.0,0.0,0.0,1.0,0.6362238526344299,-0.03271578252315521,0.01955467090010643,0.7651912569999695,1.3583850860595703,1.0,1.3882539980113506,1.0,1.0
"def load_map(map, src_file, output_dir, scale=1, cache_dir=None, datasources_cfg=None, user_styles=[], verbose=False):
    scheme, n, path, p, q, f = urlparse(src_file)
    if scheme in ('file', ''):
        assert exists(src_file), ""We'd prefer an input file that exists to one that doesn't""
    if cache_dir is None:
        cache_dir = expanduser(CACHE_DIR)
        if not isdir(cache_dir):
            mkdir(cache_dir)
            chmod(cache_dir, 0755)
    dirs = Directories(output_dir, realpath(cache_dir), dirname(src_file))
    compile(src_file, dirs, verbose, datasources_cfg=datasources_cfg, user_styles=user_styles, scale=scale).to_mapnik(map, dirs)",1.0,0.0,0.0,0.0,1.0,0.8460764288902283,-0.07989510893821716,0.002372991293668747,0.8880107402801514,1.6281135082244873,1.0,1.6565650515258312,1.0,2.0
"def fetch_contributing_datasets(self, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.fetch_contributing_datasets_with_http_info(**kwargs)
        else:
            (data) = self.fetch_contributing_datasets_with_http_info(**kwargs)
            return data",2.0,0.0,0.0,1.0,3.0,1.7710225582122803,0.021718189120292664,0.02088712900876999,1.1317135095596313,3.1062514781951904,3.0,2.9453413859009743,3.0,3.0
"def ccds(self, ccdsid=None, hgnc_symbol=None, hgnc_identifier=None, limit=None, as_df=False):
        q = self.session.query(models.CCDS)
        model_queries_config = (
            (ccdsid, models.CCDS.ccdsid),
        )
        q = self.get_model_queries(q, model_queries_config)
        one_to_many_queries_config = (
            (hgnc_symbol, models.HGNC.symbol),
            (hgnc_identifier, models.HGNC.identifier)
        )
        q = self.get_one_to_many_queries(q, one_to_many_queries_config)
        return self._limit_and_df(q, limit, as_df)",1.0,0.0,1.0,1.0,3.0,0.6360770463943481,-0.026492230594158173,0.9113447070121765,0.9509833455085754,2.8129847049713135,3.0,2.471912868320942,3.0,3.0
"def _ask(question, default=None, data_type='str', show_hint=False):
    data = default
    if data_type == 'bool':
        data = None
        default_string = ""Y"" if default else ""N""
        while data not in ('Y', 'J', 'N', '1', '0'):
            data = input(""%s? [%s]: "" % (question, default_string)).upper()
            if data == '':
                return default
        return data in ('Y', 'J', '1')
    elif data_type in ('str', 'unicode'):
        if show_hint:
            msg = ""%s? [%s] (%s): "" % (question, default, data_type)
        else:
            msg = question
        data = input(msg)
        if len(data) == 0:
            data = default
    elif data_type == 'int':
        if show_hint:
            msg = ""%s? [%s] (%s): "" % (question, default, data_type)
        else:
            msg = question
        data = input(msg)
        if len(data) == 0:
            data = int(default)
        else:
            data = int(data)
    return data",1.0,0.0,0.0,1.0,2.0,0.9396381378173828,-0.0634712278842926,-0.028473880141973495,1.0273938179016113,1.8292315006256104,2.0,1.875086847692728,2.0,2.0
"def translate_dialog_to_lists(dialog_filename):
    dialog_file = open(dialog_filename, 'r')
    dialog_reader = unicodecsv.reader(dialog_file, delimiter='\t', quoting=csv.QUOTE_NONE)
    first_turn = True
    dialog = []
    same_user_utterances = []
    dialog.append(same_user_utterances)
    for dialog_line in dialog_reader:
        if first_turn:
            last_user = dialog_line[1]
            first_turn = False
        if last_user != dialog_line[1]:
            same_user_utterances = []
            dialog.append(same_user_utterances)
        same_user_utterances.append(dialog_line[3])
        last_user = dialog_line[1]
    dialog.append([dialog_end_symbol])
    return dialog",1.0,0.0,0.0,1.0,2.0,0.8557412028312683,-0.03123815357685089,0.030310966074466705,0.8769382834434509,1.7796764373779297,2.0,1.731752298772335,2.0,2.0
"def create(self, title, teamId=None, **request_parameters):
        check_type(title, basestring)
        check_type(teamId, basestring)
        post_data = dict_from_items_with_values(
            request_parameters,
            title=title,
            teamId=teamId,
        )
        json_data = self._session.post(API_ENDPOINT, json=post_data)
        return self._object_factory(OBJECT_TYPE, json_data)",1.0,0.0,0.0,2.0,3.0,1.403363585472107,0.0029081543907523155,0.07593628764152527,1.1713346242904663,3.160252094268799,3.0,2.653542651794851,3.0,3.0
"def to_pickle(obj, path, compression='infer',
              protocol=pickle.HIGHEST_PROTOCOL):
    path = _stringify_path(path)
    f, fh = _get_handle(path, 'wb',
                        compression=compression,
                        is_text=False)
    if protocol < 0:
        protocol = pickle.HIGHEST_PROTOCOL
    try:
        f.write(pickle.dumps(obj, protocol=protocol))
    finally:
        f.close()
        for _f in fh:
            _f.close()",1.0,1.0,1.0,0.0,3.0,0.782199501991272,0.0062373047694563866,0.03914722800254822,0.8668654561042786,1.7307504415512085,3.0,1.6944494908675551,3.0,2.0
"def execute(self, using=None):
        if not using:
            using = self.get_connection()
        inserted_entities = {}
        for klass in self.orders:
            number = self.quantities[klass]
            if klass not in inserted_entities:
                inserted_entities[klass] = []
            for i in range(0, number):
                entity = self.entities[klass].execute(using, inserted_entities)
                inserted_entities[klass].append(entity)
        return inserted_entities",1.0,1.0,0.0,1.0,3.0,0.30432039499282837,0.23766224086284637,0.7624751925468445,0.6143987774848938,1.968274474143982,3.0,1.918856605887413,3.0,2.0
"def validate_account_user_email(self, account_id, user_id, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.validate_account_user_email_with_http_info(account_id, user_id, **kwargs)
        else:
            (data) = self.validate_account_user_email_with_http_info(account_id, user_id, **kwargs)
            return data",1.0,0.0,0.0,2.0,3.0,1.4340415000915527,0.020240552723407745,-0.03047451749444008,1.1637414693832397,2.7626163959503174,3.0,2.58754900470376,3.0,3.0
"def confirm(prompt=None, resp=False):
    if prompt is None:
        prompt = 'Confirm'
    if resp:
        prompt = '%s [%s]|%s: ' % (prompt, 'y', 'n')
    else:
        prompt = '%s [%s]|%s: ' % (prompt, 'n', 'y')
    while True:
        ans = raw_input(prompt)
        if not ans:
            return resp
        if ans not in ['y', 'Y', 'n', 'N']:
            print 'please enter y or n.'
            continue
        if ans == 'y' or ans == 'Y':
            return True
        if ans == 'n' or ans == 'N':
            return False",1.0,0.0,0.0,1.0,2.0,1.04853355884552,-0.02013527601957321,-0.03265247121453285,1.0004043579101562,2.064000129699707,2.0,1.9961501695215702,2.0,2.0
"def _post_message(channel,
                  message,
                  username,
                  as_user,
                  api_key=None):
    parameters = dict()
    parameters['channel'] = channel
    parameters['username'] = username
    parameters['as_user'] = as_user
    parameters['text'] = '```' + message + '```'
    result = salt.utils.slack.query(function='message',
                                    api_key=api_key,
                                    method='POST',
                                    header_dict={'Content-Type': 'application/x-www-form-urlencoded'},
                                    data=_urlencode(parameters))
    log.debug('Slack message post result: %s', result)
    if result:
        return True
    else:
        return False",1.0,0.0,0.0,1.0,2.0,1.1578881740570068,0.05273774266242981,-0.00029281899333000183,1.1613235473632812,2.612955093383789,2.0,2.371656645089388,2.0,3.0
"def send_request_email(
        authorised_text, authorised_role, authorised_persons, application,
        link, is_secret):
    context = CONTEXT.copy()
    context['requester'] = application.applicant
    context['link'] = link
    context['is_secret'] = is_secret
    context['application'] = application
    context['authorised_text'] = authorised_text
    _send_request_email(
        context,
        authorised_role, authorised_persons,
        ""common_request"")",1.0,0.0,0.0,0.0,1.0,0.9905908107757568,0.002476452849805355,0.011781435459852219,0.9490042328834534,2.080781936645508,1.0,1.9538529319688678,1.0,2.0
"def idrac_general(blade_name, command, idrac_password=None,
                  host=None,
                  admin_username=None, admin_password=None):
    module_network = network_info(host, admin_username,
                                  admin_password, blade_name)
    if idrac_password is not None:
        password = idrac_password
    else:
        password = admin_password
    idrac_ip = module_network['Network']['IP Address']
    ret = __execute_ret(command, host=idrac_ip,
                        admin_username='root',
                        admin_password=password)
    if ret['retcode'] == 0:
        return ret['stdout']
    else:
        return ret",2.0,0.0,0.0,1.0,3.0,1.0090566873550415,0.00826603826135397,0.04874598607420921,1.0067026615142822,2.108211040496826,3.0,2.072771373204887,3.0,2.0
"def get_authorize_url(self, redirect_uri, **kw):
        redirect = redirect_uri if redirect_uri else self._redirect_uri
        if not redirect:
            raise APIError('21305', 'Parameter absent: redirect_uri', 'OAuth2 request')
        response_type = kw.pop('response_type', 'code')
        return 'https://api.weibo.com/oauth2/authorize?%s' % \
               _encode_params(client_id=self._client_id,
                              response_type=response_type,
                              redirect_uri=redirect, **kw)",1.0,0.0,0.0,1.0,2.0,1.4764834642410278,0.002283192239701748,-0.10348355770111084,1.0820200443267822,2.674664258956909,2.0,2.457303143106401,2.0,3.0
"def key_wait():
    while 1:
        for event in get():
            if event.type == 'KEYDOWN':
                return event
            if event.type == 'QUIT':
                return KeyDown('F4', '', True, False, True, False, False)
        _time.sleep(.001)",1.0,0.0,0.0,1.0,2.0,0.8053316473960876,-0.08613613992929459,0.02258116379380226,0.8672587871551514,1.7154203653335571,2.0,1.6090354584157467,2.0,2.0
"def suspend(self):
        task_invitation = TaskInvitation.objects.get(self.task_invitation_key)
        wfi = task_invitation.instance
        if wfi.current_actor.exist and wfi.current_actor == self.current.role:
            for m in RoleModel.objects.filter(abstract_role=self.current.role.abstract_role,
                                              unit=self.current.role.unit):
                if m != self.current.role:
                    task_invitation.key = ''
                    task_invitation.role = m
                    task_invitation.save()
            wfi.current_actor = RoleModel()
            wfi.save()
            title = _(u""Successful"")
            msg = _(u""You left the workflow."")
        else:
            title = _(u""Unsuccessful"")
            msg = _(u""Unfortunately, this workflow does not belong to you or is already idle."")
        self.current.msg_box(title=title, msg=msg)",1.0,2.0,2.0,1.0,6.0,0.46750062704086304,0.0559169203042984,0.820792019367218,0.7727091312408447,2.5711634159088135,6.0,2.116918697953224,6.0,3.0
"def _get_captcha(reddit_session, captcha_id):
    url = urljoin(reddit_session.config['captcha'],
                  captcha_id + '.png')
    sys.stdout.write('Captcha URL: {0}\nCaptcha: '.format(url))
    sys.stdout.flush()
    raw = sys.stdin.readline()
    if not raw:
        sys.stdin.close()
        return None
    return {'iden': captcha_id, 'captcha': raw.strip()}",1.0,0.0,0.0,1.0,2.0,1.0227779150009155,0.0627615675330162,0.019187558442354202,0.9344930052757263,2.075030565261841,2.0,2.0392200462520123,2.0,2.0
"def hydrate(self, database, recursive=True):
        if isinstance(self, Document):
            self.reload(database)
        for field in self:
            obj = getattr(self, field)
            if isinstance(obj, Document):
                obj.reload(database)
                if recursive:
                    obj.hydrate(database)
        return self",0.0,0.0,1.0,0.0,1.0,0.2849947214126587,0.27147620916366577,0.5850429534912109,0.5537956357002258,1.7330769300460815,1.0,1.6953095197677612,1.0,2.0
"def authenticate_redirect(self, callback_uri=None,
                              ask_for=[""name"", ""email"", ""language"", ""username""]):
        callback_uri = callback_uri or request.url
        args = self._openid_args(callback_uri, ax_attrs=ask_for)
        return redirect(self._OPENID_ENDPOINT +
                        (""&"" if ""?"" in self._OPENID_ENDPOINT else ""?"") +
                        urllib.urlencode(args))",2.0,0.0,0.0,1.0,3.0,1.1745705604553223,-0.04197019338607788,-0.06260138750076294,1.0008125305175781,2.242196798324585,3.0,2.0708115100860596,3.0,2.0
"def search(session, query):
    flat_query = """".join(query.split())
    artists = session.query(Artist).filter(
            or_(Artist.name.ilike(f""%%{query}%%""),
                Artist.name.ilike(f""%%{flat_query}%%""))
               ).all()
    albums = session.query(Album).filter(
            Album.title.ilike(f""%%{query}%%"")).all()
    tracks = session.query(Track).filter(
            Track.title.ilike(f""%%{query}%%"")).all()
    return dict(artists=artists,
                albums=albums,
                tracks=tracks)",1.0,0.0,1.0,1.0,3.0,0.6697131395339966,-0.043535150587558746,0.8350793123245239,0.8588466048240662,2.7487165927886963,3.0,2.320103906095028,3.0,3.0
"def write_keywords(layer, keywords):
        if not isinstance(layer, QgsMapLayer):
            raise Exception(
                tr('The layer is not a QgsMapLayer : {type}').format(
                    type=type(layer)))
        source = layer.source()
        write_iso19115_metadata(source, keywords)",1.0,0.0,0.0,0.0,1.0,0.7330068945884705,-0.07718995213508606,0.00064057856798172,0.8140308856964111,1.5539515018463135,1.0,1.4704884067177773,1.0,2.0
"def get_user_home(self, user):
        user_home = self._conf['user_home']
        if user_home:
            if callable(user_home):
                return user_home(user)
            elif isinstance(user_home, six.string_types):
                if '/' in user_home:
                    return user_home
                else:
                    mod, func = user_home.rsplit(""."", 1)
                    return getattr(import_module(mod), func)(user)
            raise ValueError('The user_home setting must be either a string '
                             'or a callable object (e.g. a function).')
        else:
            return self.get_absolute_url()",0.0,0.0,0.0,1.0,1.0,0.792849600315094,-0.09032422304153442,0.01389332115650177,0.9091289639472961,1.4940325021743774,1.0,1.6255476623773575,1.0,1.0
"def to_pickle(self, path, compression='infer',
                  protocol=pickle.HIGHEST_PROTOCOL):
        from pandas.io.pickle import to_pickle
        return to_pickle(self, path, compression=compression,
                         protocol=protocol)",1.0,0.0,0.0,0.0,1.0,0.6799017190933228,-0.031371429562568665,-0.030499622225761414,0.8053993582725525,1.547415018081665,1.0,1.4234300255775452,1.0,2.0
"def db_list(**connection_args):
    dbc = _connect(**connection_args)
    if dbc is None:
        return []
    cur = dbc.cursor()
    qry = 'SHOW DATABASES'
    try:
        _execute(cur, qry)
    except MySQLdb.OperationalError as exc:
        err = 'MySQL Error {0}: {1}'.format(*exc.args)
        __context__['mysql.error'] = err
        log.error(err)
        return []
    ret = []
    results = cur.fetchall()
    for dbs in results:
        ret.append(dbs[0])
    log.debug(ret)
    return ret",1.0,0.0,1.0,1.0,3.0,0.4977533519268036,0.20794831216335297,0.9244889616966248,0.7008039951324463,2.5424933433532715,3.0,2.3309946209192276,3.0,3.0
"def search(self):
        self.__interrupt_search()
        search_pattern = self.Search_comboBox.currentText()
        replacement_pattern = self.Replace_With_comboBox.currentText()
        if not search_pattern:
            return False
        SearchAndReplace.insert_pattern(search_pattern, self.__search_patterns_model)
        SearchAndReplace.insert_pattern(replacement_pattern, self.__replace_with_patterns_model)
        location = umbra.ui.common.parse_location(
            foundations.strings.to_string(self.Where_lineEdit.text()) or
            self.__targets_format.format(self.__default_target))
        self.__ignore_hidden_files and location.filters_out.append(""\\\.|/\."")
        settings = self.__get_settings()
        self.__search_worker_thread = Search_worker(self, search_pattern, location, settings)
        self.__search_worker_thread.searchFinished.connect(self.__search_worker_thread__searchFinished)
        self.__container.engine.worker_threads.append(self.__search_worker_thread)
        self.__container.engine.start_processing(""Searching In Files ..."")
        self.__search_worker_thread.start()
        return True",1.0,0.0,0.0,1.0,2.0,0.8560264706611633,-0.06686531007289886,0.06517986953258514,0.928162157535553,1.940672516822815,2.0,1.7825031876564026,2.0,2.0
"def sendeof(self):
        if hasattr(termios, 'VEOF'):
            char = termios.tcgetattr(self.child_fd)[6][termios.VEOF]
        else:
            char = chr(4)
        self.send(char)",0.0,0.0,0.0,1.0,1.0,0.6931594014167786,-0.07647304981946945,-0.02874745801091194,0.8223463892936707,1.43504798412323,1.0,1.4102852828800678,1.0,1.0
"def change_password(self, previous, new_password):
        if not self.verify_password(previous):
            raise exceptions.Unauthorized('Incorrect password')
        if len(new_password) < options.min_length_password:
            msg = ('Passwords must be at least {} characters'
                   .format(options.min_length_password))
            raise exceptions.ValidationError(msg)
        if len(new_password) > options.max_length_password:
            msg = ('Passwords must be at no more than {} characters'
                   .format(options.max_length_password))
            raise exceptions.ValidationError(msg)
        self.password = self.hash_password(new_password)
        yield self._save()",1.0,0.0,0.0,1.0,2.0,0.9441574811935425,-0.031692229211330414,-0.008823338896036148,0.8973851203918457,1.8312467336654663,2.0,1.8010270334780216,2.0,2.0
"def forward_message(self, chat_id, from_chat_id, message_id, disable_notification=False):
        assert_type_or_raise(chat_id, (int, unicode_type), parameter_name=""chat_id"")
        assert_type_or_raise(from_chat_id, (int, unicode_type), parameter_name=""from_chat_id"")
        assert_type_or_raise(message_id, int, parameter_name=""message_id"")
        assert_type_or_raise(disable_notification, None, bool, parameter_name=""disable_notification"")
        result = self.do(
            ""forwardMessage"", chat_id=chat_id, from_chat_id=from_chat_id, message_id=message_id,
            disable_notification=disable_notification
        )
        if self.return_python_objects:
            logger.debug(""Trying to parse {data}"".format(data=repr(result)))
            from pytgbot.api_types.receivable.updates import Message
            try:
                return Message.from_array(result)
            except TgApiParseException:
                logger.debug(""Failed parsing as api_type Message"", exc_info=True)
            raise TgApiParseException(""Could not parse result."")
        return result",1.0,0.0,0.0,1.0,2.0,1.1734538078308105,-0.03911122679710388,0.00034498050808906555,1.1282544136047363,2.715057611465454,2.0,2.262941975146532,2.0,3.0
"def stage_import_from_url(self, url, token=None, username=None, password=None, insecure=False):
        schema = ImportSchema()
        resp = self.service.post(self.base,
                                 params={'url': url, 'token': token, 'username': username, 'password': password, 'insecure': insecure})
        return self.service.decode(schema, resp)",1.0,0.0,0.0,1.0,2.0,1.3495670557022095,0.0009121587499976158,0.02715355157852173,1.093645691871643,2.680718421936035,2.0,2.471278457902372,2.0,3.0
"def _notify_create_process(self, event):
        dwProcessId = event.get_pid()
        dwThreadId  = event.get_tid()
        hProcess    = event.get_process_handle()
        if dwProcessId not in self.__processDict:
            aProcess = Process(dwProcessId, hProcess)
            self._add_process(aProcess)
            aProcess.fileName = event.get_filename()
        else:
            aProcess = self.get_process(dwProcessId)
            if not aProcess.fileName:
                fileName = event.get_filename()
                if fileName:
                    aProcess.fileName = fileName
        return aProcess._notify_create_process(event)",0.0,0.0,0.0,1.0,1.0,0.6720629930496216,0.028438113629817963,0.06318925321102142,0.8413161039352417,1.7447131872177124,1.0,1.6050064638257027,1.0,2.0
"def SensorShare(self, sensor_id, parameters):
        if not parameters['user']['id']:
            parameters['user'].pop('id')
        if not parameters['user']['username']:
            parameters['user'].pop('username')
        if self.__SenseApiCall__(""/sensors/{0}/users"".format(sensor_id), ""POST"", parameters = parameters):
            return True
        else:
            self.__error__ = ""api call unsuccessful""
            return False",1.0,0.0,0.0,2.0,3.0,1.565111517906189,-0.0044651934877038,-0.005288109183311462,1.1416345834732056,2.979767084121704,3.0,2.6969927987083793,3.0,3.0
"def is_admin():
    if os.name == 'nt':
        import ctypes
        import traceback
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            traceback.print_exc()
            return False
    else:
        return os.getuid() == 0",1.0,0.0,0.0,1.0,2.0,0.8405738472938538,-0.03444312512874603,-0.018646594136953354,0.8571053743362427,1.6825276613235474,2.0,1.644589502364397,2.0,2.0
"def event_text_key(self, event):
        char = event.char
        if not char or char not in string.ascii_letters:
            return
        converted_char = invert_shift(char)
        log.debug(""convert keycode %s - char %s to %s"", event.keycode, repr(char), converted_char)
        self.text.insert(tkinter.INSERT, converted_char)
        return ""break""",1.0,0.0,0.0,1.0,2.0,0.6583212018013,-0.06448446214199066,0.006101410835981369,0.832000195980072,1.6237255334854126,2.0,1.4319383464753628,2.0,2.0
"def GetAllUsers(self, pagination_size=10):
    next_page_token, accounts = self.rpc_helper.DownloadAccount(
        None, pagination_size)
    while accounts:
      for account in accounts:
        yield GitkitUser.FromApiResponse(account)
      next_page_token, accounts = self.rpc_helper.DownloadAccount(
          next_page_token, pagination_size)",2.0,0.0,1.0,1.0,4.0,1.9691568613052368,-0.07110893726348877,0.09254667162895203,1.125700831413269,3.310120105743408,4.0,3.116295427083969,4.0,3.0
"def promote_chat_member(self, chat_id, user_id, can_change_info=None, can_post_messages=None,
                            can_edit_messages=None, can_delete_messages=None, can_invite_users=None,
                            can_restrict_members=None, can_pin_messages=None, can_promote_members=None):
        return apihelper.promote_chat_member(self.token, chat_id, user_id, can_change_info, can_post_messages,
                                             can_edit_messages, can_delete_messages, can_invite_users,
                                             can_restrict_members, can_pin_messages, can_promote_members)",1.0,0.0,0.0,2.0,3.0,1.26755952835083,-0.002660372294485569,-0.01577238366007805,1.1737715005874634,2.509687662124634,3.0,2.42289827298373,3.0,3.0
"def hurst_rs(data, nvals=None, fit=""RANSAC"", debug_plot=False,
             debug_data=False, plot_file=None, corrected=True, unbiased=True):
  data = np.asarray(data)
  total_N = len(data)
  if nvals is None:
    nvals = logmid_n(total_N, ratio=1/4.0, nsteps=15)
  rsvals = np.array([rs(data, n, unbiased=unbiased) for n in nvals])
  not_nan = np.logical_not(np.isnan(rsvals))
  rsvals = rsvals[not_nan]
  nvals = np.asarray(nvals)[not_nan]
  if len(rsvals) == 0:
    poly = [np.nan, np.nan]
    if debug_plot:
      warnings.warn(""Cannot display debug plot, all (R/S)_n are NaN"")
  else:
    xvals = np.log(nvals)
    yvals = np.log(rsvals)
    if corrected:
      yvals -= np.log([expected_rs(n) for n in nvals])
    poly = poly_fit(xvals, yvals, 1, fit=fit)
    if debug_plot:
      plot_reg(xvals, yvals, poly, ""log(n)"", ""log((R/S)_n)"",
               fname=plot_file)
  h = poly[0] + 0.5 if corrected else poly[0]
  if debug_data:
    return (h, (np.log(nvals), np.log(rsvals), poly))
  else:
    return h",1.0,0.0,0.0,1.0,2.0,0.8413012623786926,-0.03181150555610657,0.08280922472476959,0.9028612375259399,1.6844401359558105,2.0,1.7951602190732956,2.0,2.0
"def expand (self, user=False, vars=False, glob=False, resolve=False):
        from os import path
        from glob import glob
        text = text_type (self)
        if user:
            text = path.expanduser (text)
        if vars:
            text = path.expandvars (text)
        if glob:
            results = glob (text)
            if len (results) == 1:
                text = results[0]
            elif len (results) > 1:
                raise IOError ('glob of %r should\'ve returned 0 or 1 matches; got %d'
                               % (text, len (results)))
        other = self.__class__ (text)
        if resolve:
            other = other.resolve ()
        return other",1.0,0.0,0.0,1.0,2.0,0.9196645021438599,-0.04145818203687668,-0.006135743111371994,0.9277738928794861,1.7174173593521118,2.0,1.7998444698750973,2.0,2.0
"def make_fpfList(options):
    user_values = options.fpf
    defaults = ['0.0001', '0.001', '0.01', '0.05']
    if user_values:
        for fpf in user_values:
            if fpf not in defaults:
                defaults.append(fpf)
        defaults.sort()
    return defaults",0.0,0.0,0.0,1.0,1.0,0.8123087882995605,-0.02229909598827362,0.024192973971366882,0.8684187531471252,1.5741820335388184,1.0,1.682621419429779,1.0,2.0
"def datetime_entry(self, prompt, message=None, formats=['%x %X'], show_example=False,
            rofi_args=None, **kwargs):
        def datetime_validator(text):
            for format in formats:
                try:
                    dt = datetime.strptime(text, format)
                except ValueError:
                    continue
                else:
                    return (dt, None)
            return (None, 'Please enter a valid date and time.')
        if show_example:
            message = message or """"
            message += ""Current date and time in the correct format: "" + datetime.now().strftime(formats[0])
        return self.generic_entry(prompt, datetime_validator, message, rofi_args, **kwargs)",1.0,0.0,0.0,1.0,2.0,0.8829562067985535,-0.0457720085978508,-0.009758535772562027,0.9514707326889038,1.8274953365325928,2.0,1.7788963951170444,2.0,2.0
"def get_user(self, request):
        try:
            return User.objects.get(username=request.data.get('username'),
                                    is_active=True)
        except User.DoesNotExist:
            return None",1.0,0.0,1.0,1.0,3.0,0.8297176957130432,-0.14672116935253143,0.6543651223182678,0.947195827960968,2.673501968383789,3.0,2.2845574766397476,3.0,3.0
"def add_to_groups(self, groups=None, all_groups=False, group_type=None):
        if all_groups:
            if groups or group_type:
                raise ArgumentError(""When adding to all groups, do not specify specific groups or types"")
            glist = ""all""
        else:
            if not groups:
                groups = []
            if not group_type:
                group_type = GroupTypes.product
            elif group_type in GroupTypes.__members__:
                group_type = GroupTypes[group_type]
            if group_type not in GroupTypes:
                raise ArgumentError(""You must specify a GroupType value for argument group_type"")
            glist = {group_type.name: [group for group in groups]}
        return self.append(add=glist)",1.0,1.0,0.0,0.0,2.0,0.8078857064247131,-0.07738158851861954,-0.00012373551726341248,0.8871700167655945,1.6137641668319702,2.0,1.6175503991544247,2.0,2.0
"def get_authenticated_user(self, callback):
        request_key = self.get_argument(""oauth_token"")
        oauth_verifier = self.get_argument(""oauth_verifier"", None)
        request_cookie = self.get_cookie(""_oauth_request_token"")
        if not request_cookie:
            log.warning(""Missing OAuth request token cookie"")
            callback(None)
            return
        self.clear_cookie(""_oauth_request_token"")
        cookie_key, cookie_secret = [base64.b64decode(i) for i in request_cookie.split(""|"")]
        if cookie_key != request_key:
            log.warning(""Request token does not match cookie"")
            callback(None)
            return
        token = dict(key=cookie_key, secret=cookie_secret)
        if oauth_verifier:
          token[""verifier""] = oauth_verifier
        http = httpclient.AsyncHTTPClient()
        http.fetch(self._oauth_access_token_url(token), self.async_callback(
            self._on_access_token, callback))",0.0,0.0,0.0,1.0,1.0,1.138368010520935,-0.039437830448150635,0.07296699285507202,0.9789451360702515,2.132503032684326,1.0,2.150842308998108,1.0,2.0
"def import_custom_views(filename):
    with open(filename) as csvfile:
        reader = csv.DictReader(csvfile)
        for view in reader:
            name = view['name']
            upperview = view['upperview']
            if len(upperview) is 0:
                upperview = None
            create_custom_views(name,upperview,auth=auth.creds, url=auth.url)",0.0,0.0,0.0,1.0,1.0,0.8517709374427795,0.034152522683143616,0.08130128681659698,0.841576874256134,1.8618639707565308,1.0,1.8088016211986542,1.0,2.0
"def api_key(request, response, verify_user, context=None, **kwargs):
    api_key = request.get_header('X-Api-Key')
    if api_key:
        try:
            user = verify_user(api_key)
        except TypeError:
            user = verify_user(api_key, context)
        if user:
            return user
        else:
            return False
    else:
        return None",1.0,0.0,1.0,1.0,3.0,1.0459039211273193,-0.047756992280483246,0.020026903599500656,0.9942034482955933,1.9739092588424683,3.0,2.01237728074193,3.0,2.0
"def send_hashtag(self, hashtag, user_ids, text='', thread_id=None):
    user_ids = _get_user_ids(self, user_ids)
    if not isinstance(text, str) and not isinstance(user_ids, (list, str)):
        self.logger.error('Text must be an string, user_ids must be an list or string')
        return False
    if self.reached_limit('messages'):
        self.logger.info(""Out of messages for today."")
        return False
    self.delay('message')
    if self.api.send_direct_item(
        'hashtag', user_ids, text=text, thread=thread_id, hashtag=hashtag
    ):
        self.total['messages'] += 1
        return True
    self.logger.info(""Message to {user_ids} wasn't sent"".format(user_ids=user_ids))
    return False",1.0,0.0,0.0,2.0,3.0,1.217987060546875,-0.052246369421482086,0.15469494462013245,1.0787216424942017,2.7573626041412354,3.0,2.399157278239727,3.0,3.0
"def compare_tags(self, tags):
        all_tags = []
        for task in self._tasks:
            all_tags.extend(task.tags)
        all_tags_set = set(all_tags)
        tags_set = set(tags)
        matched_tags = all_tags_set & tags_set
        unmatched_tags = all_tags_set - tags_set
        return matched_tags, unmatched_tags",0.0,0.0,0.0,1.0,1.0,0.779732346534729,-0.05803888291120529,0.06108245998620987,0.8016111850738525,1.61841881275177,1.0,1.5843871086835861,1.0,2.0
"def untarbz(source_file_path, output_directory_path, silent=False):
    if not path.exists(source_file_path):
        raise Exception(""the provided tar file %s does not exist."" % (source_file_path))
    if output_directory_path[0:1] == ""./"":
        output_directory_path = path.abspath(output_directory_path)
    if output_directory_path[0] != ""/"":
        raise Exception(""your output directory path must start with '/' or './'; you used: %s""
                        % (output_directory_path))
    create_folders(output_directory_path)
    if listdir(output_directory_path):
        raise Exception(""Your output directory isn't empty.  Aborting as ""
                        + ""exiting files are not overwritten by tar."")
    untar_command = (""tar jxfvkCp %s %s --atime-preserve "" %
                     (source_file_path, output_directory_path))
    call(untar_command, silent=silent)",0.0,1.0,0.0,0.0,1.0,0.8439910411834717,0.0482759028673172,0.03023402765393257,0.8067418336868286,1.694693922996521,1.0,1.72924280539155,1.0,2.0
"def add_ipv4(self, id_network_ipv4, id_equipamento, descricao):
        ip_map = dict()
        ip_map['id_network_ipv4'] = id_network_ipv4
        ip_map['description'] = descricao
        ip_map['id_equipment'] = id_equipamento
        code, xml = self.submit({'ip': ip_map}, 'POST', 'ipv4/')
        return self.response(code, xml)",1.0,0.0,0.0,2.0,3.0,1.3999449014663696,0.022361136972904205,0.018381040543317795,1.2000706195831299,3.1027653217315674,3.0,2.6407576985657215,3.0,3.0
"def create(self, unique_name=values.unset, friendly_name=values.unset,
               identity=values.unset, deployment_sid=values.unset,
               enabled=values.unset):
        data = values.of({
            'UniqueName': unique_name,
            'FriendlyName': friendly_name,
            'Identity': identity,
            'DeploymentSid': deployment_sid,
            'Enabled': enabled,
        })
        payload = self._version.create(
            'POST',
            self._uri,
            data=data,
        )
        return DeviceInstance(self._version, payload, fleet_sid=self._solution['fleet_sid'], )",1.0,0.0,0.0,2.0,3.0,1.100793480873108,0.10339521616697311,0.17385777831077576,1.1490918397903442,2.899961233139038,3.0,2.527138315141201,3.0,3.0
"def find_message(current):
    current.output = {
        'results': [],
        'status': 'OK',
        'code': 201
    }
    query_set = Message(current).objects.search_on(['msg_title', 'body', 'url'],
                                                   contains=current.input['query'])
    if current.input['channel_key']:
        query_set = query_set.filter(channel_id=current.input['channel_key'])
    else:
        subscribed_channels = Subscriber.objects.filter(user_id=current.user_id).values_list(
            ""channel_id"", flatten=True)
        query_set = query_set.filter(channel_id__in=subscribed_channels)
    query_set, pagination_data = _paginate(current_page=current.input['page'], query_set=query_set)
    current.output['pagination'] = pagination_data
    for msg in query_set:
        current.output['results'].append(msg.serialize(current.user))",1.0,0.0,1.0,1.0,3.0,0.7510414123535156,-0.05475778132677078,0.8933988809585571,0.9204431772232056,2.9400243759155273,3.0,2.5101256892085075,3.0,3.0
"def edit( key = '', value = '', parent = None ):
        dlg = XKeyValueDialog(parent)
        dlg.setKey(key)
        dlg.setValue(value)
        if ( dlg.exec_() ):
            return (True, dlg.key(), dlg.value())
        return (False, '', '')",1.0,0.0,0.0,1.0,2.0,0.9863904118537903,-0.05323369801044464,0.07468405365943909,0.9433773159980774,2.065727949142456,2.0,1.9512180835008621,2.0,2.0
"def make_choice_validator(
        choices, default_key=None, normalizer=None):
    def normalize_all(_choices):
        if normalizer:
            _choices = [(normalizer(key), value) for key, value in choices]
        return _choices
    choices = normalize_all(choices)
    def choice_validator(value):
        if normalizer:
            value = normalizer(value)
        if not value and default_key:
            value = choices[default_key][0]
        results = []
        for choice, mapped in choices:
            if value == choice:
                return mapped
            if choice.startswith(value):
                results.append((choice, mapped))
        if len(results) == 1:
            return results[0][1]
        elif not results:
            raise ValueError('Invalid choice.')
        else:
            raise ValueError(
                'Choice ambiguous between (%s)' % ', '.join(
                    k for k, v in normalize_all(results))
            )
    return choice_validator",1.0,0.0,0.0,1.0,2.0,0.8147637844085693,-0.05537452548742294,0.038242120295763016,0.9118865132331848,1.5634428262710571,2.0,1.7095178924500942,2.0,2.0
"def get_next_step(self):
        if self.layer_purpose != layer_purpose_aggregation:
            subcategory = self.parent.step_kw_subcategory.\
                selected_subcategory()
        else:
            subcategory = {'key': None}
        if is_raster_layer(self.parent.layer):
            return self.parent.step_kw_source
        inasafe_fields = get_non_compulsory_fields(
            self.layer_purpose['key'], subcategory['key'])
        if not skip_inasafe_field(self.parent.layer, inasafe_fields):
            return self.parent.step_kw_inasafe_fields
        default_inasafe_fields = get_fields(
            self.layer_purpose['key'],
            subcategory['key'],
            replace_null=True,
            in_group=False
        )
        if default_inasafe_fields:
            return self.parent.step_kw_default_inasafe_fields
        return self.parent.step_kw_source",1.0,0.0,0.0,1.0,2.0,0.6485568284988403,-0.09070929884910583,0.034452423453330994,0.8915024399757385,1.4972180128097534,2.0,1.483802393078804,2.0,1.0
"def get_current_course_run(course, users_active_course_runs):
    current_course_run = None
    filtered_course_runs = []
    all_course_runs = course['course_runs']
    if users_active_course_runs:
        current_course_run = get_closest_course_run(users_active_course_runs)
    else:
        for course_run in all_course_runs:
            if is_course_run_enrollable(course_run) and is_course_run_upgradeable(course_run):
                filtered_course_runs.append(course_run)
        if not filtered_course_runs:
            filtered_course_runs = all_course_runs
        if filtered_course_runs:
            current_course_run = get_closest_course_run(filtered_course_runs)
    return current_course_run",1.0,0.0,1.0,1.0,3.0,0.9139794111251831,-0.044230759143829346,0.2614770829677582,0.883794367313385,2.0122721195220947,3.0,2.015020102262497,3.0,2.0
"def select_uoa(i):
    se=i.get('skip_enter','')
    lst=i.get('choices',[])
    if i.get('skip_sort','')!='yes':
       klst=sorted(lst, key=lambda v: v['data_uoa'])
    else:
       klst=lst
    zz={}
    iz=0
    for z1 in klst:
        z=z1['data_uid']
        zu=z1['data_uoa']
        zs=str(iz)
        zz[zs]=z
        out(zs+') '+zu+' ('+z+')')
        iz+=1
    out('')
    y='Select UOA'
    if se!='yes': y+=' (or press Enter for 0)'
    y+=': '
    rx=inp({'text':y})
    x=rx['string'].strip()
    if x=='' and se!='yes': x='0'
    if x not in zz:
       return {'return':1, 'error':'number is not recognized'}
    dduoa=zz[x]
    return {'return':0, 'choice':dduoa}",1.0,0.0,0.0,1.0,2.0,0.9563238024711609,-0.009937317110598087,0.11218996345996857,0.9715502262115479,1.9987274408340454,2.0,2.030126675032079,2.0,2.0
"def put_comments(self, resource, comment, timeout=None):
        params = {'apikey': self.api_key, 'resource': resource, 'comment': comment}
        try:
            response = requests.post(self.base + 'comments/put', params=params, proxies=self.proxies, timeout=timeout)
        except requests.RequestException as e:
            return dict(error=str(e))
        return _return_response_and_status_code(response)",1.0,0.0,0.0,2.0,3.0,1.5028842687606812,-0.018472738564014435,-0.04529915377497673,1.1486849784851074,2.9166955947875977,3.0,2.5877973549067974,3.0,3.0
"def list_projects(self, tags=None, pattern=None, username=None, owner=None,
                      namespace=None, fork=None, short=None, page=None,
                      per_page=None):
        request_url = ""{}/api/0/projects"".format(self.instance)
        payload = {}
        if tags is not None:
            payload['tags'] = tags
        if pattern is not None:
            payload['pattern'] = pattern
        if username is not None:
            payload['username'] = username
        if owner is not None:
            payload['owner'] = owner
        if namespace is not None:
            payload['namespace'] = namespace
        if fork is not None:
            payload['fork'] = fork
        if short is not None:
            payload['short'] = short
        if page is not None:
            payload['page'] = str(page)
        if per_page is not None:
            payload['per_page'] = str(per_page)
        return_value = self._call_api(request_url, params=payload)
        return return_value['projects']",2.0,0.0,0.0,1.0,3.0,1.6367113590240479,-0.04510156065225601,-0.01907483860850334,1.1387059688568115,2.9492897987365723,3.0,2.7112409286201,3.0,3.0
"def add_user(
            self, user,
            first_name=None, last_name=None,
            email=None, password=None
        ):
        self.project_service.set_auth(self._token_project)
        self.project_service.add_user(
            user, first_name, last_name, email, password)",1.0,0.0,0.0,1.0,2.0,1.0309265851974487,0.030476689338684082,0.009141359478235245,1.0056586265563965,2.1851885318756104,2.0,2.0762032605707645,2.0,2.0
"def main(mash_output, hash_cutoff, sample_id, assembly_file):
    input_f = open(mash_output, ""r"")
    master_dict = {}
    for line in input_f:
        tab_split = line.split(""\t"")
        current_seq = tab_split[1].strip()
        ref_accession = ""_"".join(tab_split[0].strip().split(""_"")[0:3])
        mash_dist = tab_split[2].strip()
        hashes_list = tab_split[-1].strip().split(""/"")
        perc_hashes = float(hashes_list[0]) / float(hashes_list[1])
        if ref_accession in master_dict.keys():
            current_seq += "", {}"".format(master_dict[ref_accession][-1])
        if perc_hashes > float(hash_cutoff):
            master_dict[ref_accession] = [
                round(1 - float(mash_dist), 2),
                round(perc_hashes, 2),
                current_seq
            ]
    send_to_output(master_dict, mash_output, sample_id, assembly_file)",0.0,0.0,0.0,0.0,0.0,0.8136881589889526,-0.04955871403217316,0.017201196402311325,0.8863469958305359,1.576490044593811,0.0,1.6676776371896267,0.0,2.0
"def is_http_request_sender(self):
        try:
            request = threadlocals.request()
            if request and request.user and request.user.is_authenticated:
                requesting_user_id = request.user.id
                return str(requesting_user_id) == str(self.user.id)
        except (AttributeError, KeyError) as e:
            logger.error(""Could not check request sender: {}"".format(e))
            return False
        return False",1.0,0.0,0.0,0.0,1.0,0.9336535930633545,-0.07266472280025482,0.13490791618824005,0.8432398438453674,1.822238564491272,1.0,1.8391366302967072,1.0,2.0
"def prompt_and_delete(path, no_input=False):
    if no_input:
        ok_to_delete = True
    else:
        question = (
            ""You've downloaded {} before. ""
            ""Is it okay to delete and re-download it?""
        ).format(path)
        ok_to_delete = read_user_yes_no(question, 'yes')
    if ok_to_delete:
        if os.path.isdir(path):
            rmtree(path)
        else:
            os.remove(path)
        return True
    else:
        ok_to_reuse = read_user_yes_no(
            ""Do you want to re-use the existing version?"", 'yes'
        )
        if ok_to_reuse:
            return False
        sys.exit()",1.0,0.0,0.0,1.0,2.0,0.8809043169021606,0.051143646240234375,0.03727972134947777,0.8565086126327515,1.855469822883606,2.0,1.8258362971246243,2.0,2.0
"def read_csi_driver(self, name, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_csi_driver_with_http_info(name, **kwargs)
        else:
            (data) = self.read_csi_driver_with_http_info(name, **kwargs)
            return data",2.0,0.0,0.0,1.0,3.0,1.31778883934021,-0.05403776466846466,-0.06533654034137726,1.043691873550415,2.4707634449005127,3.0,2.242106407880783,3.0,2.0
"async def get_token(cls, host, **params):
        params['grant_type'] = ""password""
        path = ""/oauth/v2/token""
        async with aiohttp.ClientSession() as sess:
            async with sess.post(host + path, data=params) as resp:
                data = await cls.handle_json_response(resp)
                return data.get(""access_token"")",2.0,0.0,0.0,2.0,4.0,1.5880157947540283,0.040758438408374786,-0.0159035362303257,1.1392396688461304,2.8437812328338623,4.0,2.752110365778208,4.0,3.0
"def plot_pca_2d_projection(clf, X, y, title='PCA 2-D Projection', ax=None,
                           figsize=None, cmap='Spectral',
                           title_fontsize=""large"", text_fontsize=""medium""):
    transformed_X = clf.transform(X)
    if ax is None:
        fig, ax = plt.subplots(1, 1, figsize=figsize)
    ax.set_title(title, fontsize=title_fontsize)
    classes = np.unique(np.array(y))
    colors = plt.cm.get_cmap(cmap)(np.linspace(0, 1, len(classes)))
    for label, color in zip(classes, colors):
        ax.scatter(transformed_X[y == label, 0], transformed_X[y == label, 1],
                   alpha=0.8, lw=2, label=label, color=color)
    ax.legend(loc='best', shadow=False, scatterpoints=1,
              fontsize=text_fontsize)
    ax.set_xlabel('First Principal Component', fontsize=text_fontsize)
    ax.set_ylabel('Second Principal Component', fontsize=text_fontsize)
    ax.tick_params(labelsize=text_fontsize)
    return ax",0.0,0.0,0.0,1.0,1.0,0.8277509212493896,-0.06674749404191971,0.07050691545009613,0.8763229846954346,1.7202816009521484,1.0,1.7078333273530006,1.0,2.0
"def make_model_sources_image(shape, model, source_table, oversample=1):
    image = np.zeros(shape, dtype=np.float64)
    y, x = np.indices(shape)
    params_to_set = []
    for param in source_table.colnames:
        if param in model.param_names:
            params_to_set.append(param)
    init_params = {param: getattr(model, param) for param in params_to_set}
    try:
        for i, source in enumerate(source_table):
            for param in params_to_set:
                setattr(model, param, source[param])
            if oversample == 1:
                image += model(x, y)
            else:
                image += discretize_model(model, (0, shape[1]),
                                          (0, shape[0]), mode='oversample',
                                          factor=oversample)
    finally:
        for param, value in init_params.items():
            setattr(model, param, value)
    return image",0.0,0.0,0.0,1.0,1.0,0.6458855867385864,-0.02892778068780899,0.050920892506837845,0.8480337262153625,1.4224516153335571,1.0,1.5159124247729778,1.0,1.0
"def prompt_for_value(self, ctx):
        default = self.get_default(ctx)
        if isinstance(default, AutoDefault):
            return self.type_cast_value(ctx, default.value)
        if self.is_bool_flag:
            return confirm(self.prompt, default)
        return prompt(self.prompt, default=default,
                      hide_input=self.hide_input,
                      confirmation_prompt=self.confirmation_prompt,
                      value_proc=lambda x: self.process_value(ctx, x))",1.0,0.0,0.0,1.0,2.0,0.8165042400360107,-0.07519485801458359,0.003343593329191208,0.9342567920684814,1.6898895502090454,2.0,1.6789097674190998,2.0,2.0
"def login(
            cls, username=None, password=None, requests_session=None,
            rate_limit=None
    ):
        requests_session = requests_session or requests.Session()
        session = cls(requests_session, rate_limit)
        username = username or settings.USERNAME
        password = password or settings.PASSWORD
        session.do_login(username, password)
        return session",2.0,0.0,0.0,1.0,3.0,1.2082651853561401,-0.006288447417318821,0.17227905988693237,1.0269490480422974,2.4426023960113525,3.0,2.401204845868051,3.0,2.0
"def load_name(*names, load_order=DEFAULT_LOAD_ORDER, extension='yaml', missing=Missing.silent):
    def generate_sources():
        for source, name in product(load_order, names):
            if callable(source):
                yield source(name, extension)
            else:
                candidate = path.expanduser(source.format(name=name, extension=extension))
                yield loadf(candidate, default=NotConfigured)
    return Configuration(*generate_sources(), missing=missing)",1.0,0.0,0.0,1.0,2.0,0.7335755228996277,-0.07533420622348785,0.015440922230482101,0.8690828084945679,1.479063868522644,2.0,1.5427650474011898,2.0,1.0
"def parse_input(self):
        app_split = self.args[0].split('.')
        app = app_split[0]
        model_name = app_split[1].lower()
        self.model = get_model(app, model_name)
        self.field = self.args[1]",1.0,0.0,1.0,0.0,2.0,0.7646378874778748,-0.05523999035358429,0.05305827036499977,0.8283833265304565,1.6600556373596191,2.0,1.5908394940197468,2.0,2.0
"def get_entities(tweet):
    entity_key = ""entities"" if is_original_format(tweet) else ""twitter_entities""
    if get_tweet_type(tweet) == ""retweet"":
        retweet_entities = tweet.get(entity_key, [])
        all_entities = get_retweeted_tweet(tweet).get(entity_key,[]).copy()
        all_entities[""user_mentions""] = ([retweet_entities[""user_mentions""][0]] +
            all_entities[""user_mentions""])
        return all_entities
    else:
        return tweet.get(entity_key, [])",1.0,0.0,0.0,1.0,2.0,0.878500759601593,-0.002040543593466282,0.11878620088100433,0.8486276268959045,1.8232170343399048,2.0,1.8438740437850356,2.0,2.0
"def _default_transform_fn(self, model, content, content_type, accept):
        try:
            data = self._input_fn(content, content_type)
        except _errors.UnsupportedFormatError as e:
            return self._error_response(e, http_client.UNSUPPORTED_MEDIA_TYPE)
        prediction = self._predict_fn(data, model)
        try:
            result = self._output_fn(prediction, accept)
        except _errors.UnsupportedFormatError as e:
            return self._error_response(e, http_client.NOT_ACCEPTABLE)
        return result",0.0,0.0,0.0,1.0,1.0,0.8124254941940308,-0.057721637189388275,-0.05468905344605446,0.9662975668907166,1.83583402633667,1.0,1.6663123704493046,1.0,2.0
"def toCrash(self, getMemoryDump = False):
        crash = Marshaller.loads(str(self.data))
        if not isinstance(crash, Crash):
            raise TypeError(
                ""Expected Crash instance, got %s instead"" % type(crash))
        crash._rowid = self.id
        if not crash.memoryMap:
            memory = getattr(self, ""memory"", [])
            if memory:
                crash.memoryMap = [dto.toMBI(getMemoryDump) for dto in memory]
        return crash",0.0,0.0,1.0,1.0,2.0,0.6260901093482971,0.0957256630063057,0.22950419783592224,0.7576306462287903,1.6952533721923828,2.0,1.7089506164193153,2.0,2.0
"async def auth_login(
        self, username: str, password: str, timeout: DefaultNumType = _default
    ) -> SMTPResponse:
        encoded_username = base64.b64encode(username.encode(""ascii""))
        encoded_password = base64.b64encode(password.encode(""ascii""))
        async with self._command_lock:
            initial_response = await self.execute_command(
                b""AUTH"", b""LOGIN"", encoded_username, timeout=timeout
            )
            if initial_response.code != SMTPStatus.auth_continue:
                raise SMTPAuthenticationError(
                    initial_response.code, initial_response.message
                )
            response = await self.execute_command(encoded_password, timeout=timeout)
        if response.code != SMTPStatus.auth_successful:
            raise SMTPAuthenticationError(response.code, response.message)
        return response",1.0,0.0,0.0,1.0,2.0,1.0109034776687622,0.012551127932965755,0.07698038220405579,0.9952215552330017,2.2305362224578857,2.0,2.0956565430387855,2.0,2.0
"def getAsWkt(self, session):
        statement = .format(self.geometryColumnName,
                               self.tableName,
                               self.id)
        result = session.execute(statement)
        for row in result:
            return row.wkt",0.0,0.0,1.0,1.0,2.0,0.41959792375564575,0.15718072652816772,0.6400820016860962,0.6748424172401428,2.115569591522217,2.0,1.8917030692100525,2.0,2.0
"def confirm_or_abort(prompt, exitcode=os.EX_TEMPFAIL, msg=None, **extra_args):
    if click.confirm(prom1pt, **extra_args):
        return True
    else:
        if msg:
            sys.stderr.write(msg)
            sys.stderr.write('\n')
        sys.exit(exitcode)",1.0,0.0,0.0,1.0,2.0,0.9585010409355164,-0.035079024732112885,-0.002663794904947281,0.925841748714447,1.7987446784973145,2.0,1.8465999700129032,2.0,2.0
"def hostinterface_update(interfaceid, **kwargs):
    conn_args = _login(**kwargs)
    ret = {}
    try:
        if conn_args:
            method = 'hostinterface.update'
            params = {""interfaceid"": interfaceid}
            params = _params_extend(params, **kwargs)
            ret = _query(method, params, conn_args['url'], conn_args['auth'])
            return ret['result']['interfaceids']
        else:
            raise KeyError
    except KeyError:
        return ret",2.0,1.0,1.0,2.0,6.0,1.3782204389572144,0.04048459231853485,0.1270849108695984,1.1093357801437378,3.0178022384643555,6.0,2.6551257222890854,6.0,3.0
"def GetFilename(multiple=False, sep='|', **kwargs):
    args = []
    if multiple:
        args.append('--multiple')
    if sep != '|':
        args.append('--separator=%s' % sep)
    for generic_args in kwargs_helper(kwargs):
        args.append('--%s=%s' % generic_args)
    p = run_zenity('--file-selection', *args)
    if p.wait() == 0:
        return p.stdout.read()[:-1].split('|')",1.0,0.0,0.0,1.0,2.0,1.0148524045944214,-0.022779367864131927,0.016775187104940414,0.9272449612617493,1.949447751045227,2.0,1.9360931850969791,2.0,2.0
"def make_octal_permissions_mode(user=(False, False, False), group=(False, False, False), other=(False, False, False)):
    mode = ''
    for name in (user, group, other):
        read, write, execute = name
        if execute and not all(i for i in (read, write)):
            code = 1
        elif write and not all(i for i in (read, execute)):
            code = 2
        elif all(i for i in (write, execute)) and not read:
            code = 3
        elif read and not all(i for i in (write, execute)):
            code = 4
        elif all(i for i in (read, execute)) and not write:
            code = 5
        elif all(i for i in (read, write)) and not execute:
            code = 6
        elif all(i for i in (read, write, execute)):
            code = 7
        else:
            code = 0
        mode += str(code)
    return int(mode)",0.0,0.0,0.0,0.0,0.0,0.9249333143234253,-0.07368852198123932,0.02906765416264534,0.9337940812110901,1.706677794456482,0.0,1.8141065277159214,0.0,2.0
"def read_namespaced_resource_quota(self, name, namespace, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_namespaced_resource_quota_with_http_info(name, namespace, **kwargs)
        else:
            (data) = self.read_namespaced_resource_quota_with_http_info(name, namespace, **kwargs)
            return data",2.0,0.0,0.0,1.0,3.0,1.0716943740844727,-0.06262918561697006,-0.01781119778752327,1.0363247394561768,2.238743543624878,3.0,2.027578730136156,3.0,2.0
"def setup_users_page(self, ):
        self.users_tablev.horizontalHeader().setResizeMode(QtGui.QHeaderView.ResizeToContents)
        log.debug(""Loading users for users page."")
        rootdata = treemodel.ListItemData(['Username', 'First', 'Last', 'Email'])
        rootitem = treemodel.TreeItem(rootdata)
        users = djadapter.users.all()
        for usr in users:
            usrdata = djitemdata.UserItemData(usr)
            treemodel.TreeItem(usrdata, rootitem)
        self.users_model = treemodel.TreeModel(rootitem)
        self.users_tablev.setModel(self.users_model)",1.0,0.0,1.0,1.0,3.0,0.9227439165115356,0.00014091189950704575,0.24490363895893097,0.9269626140594482,2.2553329467773438,3.0,2.094751081429422,3.0,2.0
"def press_enter(multiple=False, silent=False):
    def f():
        try:
            while True:
                if silent:
                    yield input()
                else:
                    sys.stderr.write(""<press enter> "")
                    sys.stderr.flush()
                    yield input()
                if not multiple:
                    break
        except (EOFError, KeyboardInterrupt):
            if not silent:
                sys.stderr.write(""\n"")
                sys.stderr.flush()
            return
    return f",1.0,0.0,0.0,1.0,2.0,0.8840315341949463,-0.004717902280390263,-0.03488415852189064,0.9002550840377808,1.7497165203094482,2.0,1.7446845574304461,2.0,2.0
"def lookup(self, key):
        try:
            result = self.lookup_in_database(key)
        except KeyError:
            pass
        else:
            return result
        while True:
            fut = self._lookup_cache[key]
            try:
                result = yield from fut
            except ValueError:
                continue
            else:
                return result",0.0,0.0,1.0,1.0,2.0,0.052433013916015625,0.3352975845336914,1.1470309495925903,0.47289374470710754,1.8466531038284302,2.0,2.007655292749405,2.0,2.0
"def run(self, args=None):
        if not args:
            args = self.parse(sys.argv[1:])
        if getattr(args, 'verbose', False):
            self.logger.setLevel(logging.DEBUG)
        try:
            if hasattr(args, 'run'):
                args.run(self, args)
            else:
                self.__main__(args)
        except Exception as e:
            import traceback
            self.logger.debug(traceback.format_exc())
            self.logger.error(str(e))
            if self.raise_exceptions:
                raise
            sys.exit(2)",1.0,0.0,0.0,1.0,2.0,0.8621910810470581,-0.07715398818254471,0.04317174851894379,0.9258082509040833,1.6060868501663208,2.0,1.7540170922875404,2.0,2.0
"def update(self, teamId, name=None, **request_parameters):
        check_type(teamId, basestring, may_be_none=False)
        check_type(name, basestring)
        put_data = dict_from_items_with_values(
            request_parameters,
            name=name,
        )
        json_data = self._session.put(API_ENDPOINT + '/' + teamId,
                                      json=put_data)
        return self._object_factory(OBJECT_TYPE, json_data)",1.0,0.0,0.0,2.0,3.0,1.2616636753082275,0.032603807747364044,0.09408283233642578,1.1247704029083252,3.0097103118896484,3.0,2.5131207183003426,3.0,3.0
"def generate_login_url(self, scopes=None, redirect_uri=None):
        url = self.base_url + ""/oauth/authorize""
        split = list(urlparse(url))
        params = {
            ""client_id"": self.client_id,
            ""response_type"": ""code"",
        }
        if scopes:
            params[""scopes""] = OAuthScopes.serialize(scopes)
        if redirect_uri:
            params[""redirect_uri""] = redirect_uri
        split[4] = urlencode(params)
        return urlunparse(split)",1.0,0.0,0.0,1.0,2.0,1.3030662536621094,-0.006691315211355686,0.009079884737730026,1.0024664402008057,2.423980474472046,2.0,2.3079212633892894,2.0,2.0
"def db_read(self, db_number, start, size):
        logger.debug(""db_read, db_number:%s, start:%s, size:%s"" %
                     (db_number, start, size))
        type_ = snap7.snap7types.wordlen_to_ctypes[snap7.snap7types.S7WLByte]
        data = (type_ * size)()
        result = (self.library.Cli_DBRead(
            self.pointer, db_number, start, size,
            byref(data)))
        check_error(result, context=""client"")
        return bytearray(data)",1.0,0.0,0.0,1.0,2.0,0.7644799947738647,-0.04670538753271103,0.07546153664588928,0.8303139805793762,1.819036602973938,2.0,1.6235501244664192,2.0,2.0
"def role_get(name, user=None, host=None, port=None, maintenance_db=None,
             password=None, runas=None, return_password=False):
    all_users = user_list(user=user,
                          host=host,
                          port=port,
                          maintenance_db=maintenance_db,
                          password=password,
                          runas=runas,
                          return_password=return_password)
    try:
        return all_users.get(name, None)
    except AttributeError:
        log.error('Could not retrieve Postgres role. Is Postgres running?')
        return None",1.0,0.0,1.0,1.0,3.0,1.1909128427505493,-0.06655262410640717,0.23934736847877502,1.004653811454773,2.320786237716675,3.0,2.36836139857769,3.0,2.0
"def init(uri, echo=False):
    global ENGINE, _METADATA, JOBS_TABLE, METADATA_TABLE, LOGS_TABLE
    ENGINE = sqlalchemy.create_engine(uri, echo=echo, convert_unicode=True)
    _METADATA = sqlalchemy.MetaData(ENGINE)
    JOBS_TABLE = _init_jobs_table()
    METADATA_TABLE = _init_metadata_table()
    LOGS_TABLE = _init_logs_table()
    _METADATA.create_all(ENGINE)",0.0,1.0,0.0,0.0,1.0,0.6000751852989197,0.2009400576353073,0.4343037009239197,0.6062279939651489,1.964424967765808,1.0,1.8415469378232956,1.0,2.0
"def run_license_checker(config_path):
    whitelist_licenses = _get_whitelist_licenses(config_path)
    table = PrintTable(ROW_HEADERS)
    warnings = []
    for pkg in _get_packages():
        allowed = pkg.license in whitelist_licenses
        table.add_row((pkg.name, pkg.version, pkg.license, str(allowed)))
        if not allowed:
            warnings.append(pkg)
    print(table)
    print('{} RESTRICTED LICENSES DETECTED'.format(len(warnings)))",1.0,0.0,0.0,1.0,2.0,0.889944314956665,0.004948779009282589,0.1735721230506897,0.8491176962852478,1.809693455696106,2.0,1.9175829133018851,2.0,2.0
"def account_info(remote, resp):
    gh = github3.login(token=resp['access_token'])
    me = gh.me()
    return dict(
        user=dict(
            email=_extract_email(gh),
            profile=dict(
                username=me.login,
                full_name=me.name,
            ),
        ),
        external_id=str(me.id),
        external_method='github'
    )",1.0,0.0,0.0,1.0,2.0,1.3295103311538696,0.0037342971190810204,0.1256871223449707,1.0739625692367554,2.5686497688293457,2.0,2.5328943198546767,2.0,3.0
"def inserir(self, id_equipment, id_environment, is_router=0):
        equipment_environment_map = dict()
        equipment_environment_map['id_equipamento'] = id_equipment
        equipment_environment_map['id_ambiente'] = id_environment
        equipment_environment_map['is_router'] = is_router
        code, xml = self.submit(
            {'equipamento_ambiente': equipment_environment_map}, 'POST', 'equipamentoambiente/')
        return self.response(code, xml)",1.0,1.0,0.0,1.0,3.0,1.3257930278778076,0.03389151394367218,0.08012646436691284,1.2094897031784058,3.2011730670928955,3.0,2.6493007093667984,3.0,3.0
"def is_subscribed_list(self, list_id, user_id):
        try:
            return bool(self._client.show_list_subscriber(list_id=list_id, user_id=user_id))
        except TweepError as e:
            if e.api_code == TWITTER_USER_IS_NOT_LIST_MEMBER_SUBSCRIBER:
                return False
            raise",1.0,0.0,0.0,1.0,2.0,1.4582819938659668,-0.12602387368679047,0.08401598036289215,1.0447129011154175,2.819378614425659,2.0,2.460987001657486,2.0,3.0
"def get_accounts_from_file(filename):
    accounts = []
    cfgparser = __import__('configparser', {}, {}, [''])
    parser = cfgparser.RawConfigParser()
    parser.optionxform = str
    parser.read(filename)
    for user, password in parser.items('account-pool'):
        password = base64.decodebytes(password.encode('latin1'))
        accounts.append(Account(user, password.decode('latin1')))
    return accounts",1.0,0.0,0.0,1.0,2.0,0.9677140712738037,-0.006300725974142551,0.07158619165420532,0.9309813380241394,1.9785619974136353,2.0,1.9639808749780059,2.0,2.0
"def read_namespaced_deployment(self, name, namespace, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_namespaced_deployment_with_http_info(name, namespace, **kwargs)
        else:
            (data) = self.read_namespaced_deployment_with_http_info(name, namespace, **kwargs)
            return data",2.0,0.0,0.0,1.0,3.0,1.0813040733337402,-0.050465796142816544,-0.0632483959197998,1.0099141597747803,2.2642359733581543,3.0,1.9775040410459042,3.0,2.0
"def get_access(self, id_access):
        if not is_valid_int_param(id_access):
            raise InvalidParameterError(u'Equipment Access ID is invalid.')
        url = 'equipamentoacesso/id/' + str(id_access) + '/'
        code, xml = self.submit(None, 'GET', url)
        return self.response(code, xml)",2.0,0.0,0.0,1.0,3.0,1.6497663259506226,0.02065310627222061,0.04470878094434738,1.2200658321380615,3.2461795806884766,3.0,2.935194045305252,3.0,3.0
"def delete_invitation(self, invitation_id, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.delete_invitation_with_http_info(invitation_id, **kwargs)
        else:
            (data) = self.delete_invitation_with_http_info(invitation_id, **kwargs)
            return data",1.0,0.0,0.0,1.0,2.0,1.5593281984329224,0.05207834392786026,-0.03839996084570885,1.172642707824707,3.05049467086792,2.0,2.745649289339781,2.0,3.0
"def permission_check(apikey, endpoint):
        try:
            ak = APIKeys.objects.get(apikey=apikey)
            apitree = cPickle.loads(ak.apitree.encode(""ascii""))
            if apitree.match(endpoint):
                return ak.user if ak.user else AnonymousUser(), ak.seckey
        except APIKeys.DoesNotExist:
            pass
        return None, None",1.0,0.0,1.0,1.0,3.0,0.8955953121185303,-0.04061852768063545,0.5806264281272888,0.8461138606071472,2.416874885559082,3.0,2.281717073172331,3.0,2.0
"def main(guess_a=1., guess_b=0., power=3, savetxt='None', verbose=False):
    x, sol = solve(guess_a, guess_b, power)
    assert sol.success
    if savetxt != 'None':
        np.savetxt(x, savetxt)
    else:
        if verbose:
            print(sol)
        else:
            print(x)",1.0,0.0,0.0,1.0,2.0,0.9097133874893188,-0.02219071239233017,-0.020385030657052994,0.912421703338623,1.7206063270568848,2.0,1.7795593477785587,2.0,2.0
"def authorized_purchase_object(self, oid, price, huid):
        return self.request(
            'post',
            safeformat('objects/{:int}/purchases', oid),
            json.dumps({
                'price': price,
                'huid': huid,
                'autocommit': True
            }))",1.0,0.0,0.0,2.0,3.0,1.4679946899414062,-0.015250899828970432,0.053935833275318146,1.082122802734375,3.066727876663208,3.0,2.588802426122129,3.0,3.0
"def user(context, name, email):
    existing_user = context.obj['store'].user(email)
    if existing_user:
        click.echo(existing_user.to_dict())
    elif name:
        new_user = context.obj['store'].add_user(name, email)
        click.echo(click.style(f""New user added: {email} ({new_user.id})"", fg='green'))
    else:
        click.echo(click.style('User not found', fg='yellow'))",1.0,1.0,1.0,1.0,4.0,0.8708397150039673,0.1555909663438797,0.2868519723415375,0.8754347562789917,2.300233840942383,4.0,2.188717409968376,4.0,2.0
"def db_create(database, containment='NONE', new_database_options=None, **kwargs):
    if containment not in ['NONE', 'PARTIAL']:
        return 'CONTAINMENT can be one of NONE and PARTIAL'
    sql = ""CREATE DATABASE [{0}] CONTAINMENT = {1} "".format(database, containment)
    if new_database_options:
        sql += ' WITH ' + ', '.join(new_database_options)
    conn = None
    try:
        conn = _get_connection(**kwargs)
        conn.autocommit(True)
        conn.cursor().execute(sql)
    except Exception as e:
        return 'Could not create the login: {0}'.format(e)
    finally:
        if conn:
            conn.autocommit(False)
            conn.close()
    return True",1.0,1.0,0.0,0.0,2.0,0.5577781200408936,0.36704888939857483,0.5954204201698303,0.6686980128288269,2.126800775527954,2.0,2.1889454424381256,2.0,2.0
"def get_or_default_template_file_name(ctx, param, provided_value, include_build):
    search_paths = [
        ""template.yaml"",
        ""template.yml"",
    ]
    if include_build:
        search_paths.insert(0, os.path.join("".aws-sam"", ""build"", ""template.yaml""))
    if provided_value == _TEMPLATE_OPTION_DEFAULT_VALUE:
        provided_value = ""template.yml""
        for option in search_paths:
            if os.path.exists(option):
                provided_value = option
                break
    result = os.path.abspath(provided_value)
    LOG.debug(""Using SAM Template at %s"", result)
    return result",1.0,0.0,0.0,1.0,2.0,0.7747644186019897,-0.0013494277372956276,-0.004771266132593155,0.9035933017730713,1.5922422409057617,2.0,1.6722370265051723,2.0,2.0
"def add_auth_attempt(self, auth_type, successful, **kwargs):
        entry = {'timestamp': datetime.utcnow(),
                 'auth': auth_type,
                 'id': uuid.uuid4(),
                 'successful': successful}
        log_string = ''
        for key, value in kwargs.iteritems():
            if key == 'challenge' or key == 'response':
                entry[key] = repr(value)
            else:
                entry[key] = value
                log_string += '{0}:{1}, '.format(key, value)
        self.login_attempts.append(entry)",1.0,0.0,0.0,0.0,1.0,0.7761579751968384,0.02049892395734787,-0.009447004646062851,0.9298631548881531,1.7966846227645874,1.0,1.7170730493962765,1.0,2.0
"def recordModelProgress(self, modelID, modelParams, modelParamsHash, results,
                         completed, completionReason, matured, numRecords):
    if results is None:
      metricResult = None
    else:
      metricResult = results[1].values()[0]
    errScore = self._resultsDB.update(modelID=modelID,
                modelParams=modelParams,modelParamsHash=modelParamsHash,
                metricResult=metricResult, completed=completed,
                completionReason=completionReason, matured=matured,
                numRecords=numRecords)
    self.logger.debug('Received progress on model %d: completed: %s, '
                      'cmpReason: %s, numRecords: %d, errScore: %s' ,
                      modelID, completed, completionReason, numRecords, errScore)
    (bestModelID, bestResult) = self._resultsDB.bestModelIdAndErrScore()
    self.logger.debug('Best err score seen so far: %s on model %s' % \
                     (bestResult, bestModelID))",0.0,1.0,1.0,0.0,2.0,0.4745965600013733,0.18128909170627594,0.4065261781215668,0.7735745906829834,1.9671157598495483,2.0,1.8359864205121994,2.0,2.0
"def create_user(self, **kwargs):
        roles = kwargs.pop('roles', [])
        user = self.user_model(**self._prepare_create_user_args(**kwargs))
        user = self.put(user)
        for role in roles:
            self.add_role_to_user(user, role)
        self.put(user)
        return user",1.0,1.0,1.0,1.0,4.0,0.8666347861289978,0.3115547299385071,0.6021984219551086,0.9278261661529541,3.079958200454712,4.0,2.7082141041755676,4.0,3.0
"def send_miniprogrampage_message(
        self, user_id, title, appid, pagepath, thumb_media_id, kf_account=None
    ):
        data = {
            ""touser"": user_id,
            ""msgtype"": ""miniprogrampage"",
            ""miniprogrampage"": {
                ""title"": title,
                ""appid"": appid,
                ""pagepath"": pagepath,
                ""thumb_media_id"": thumb_media_id
            }
        }
        if kf_account is not None:
            data[""customservice""] = {""kf_account"": kf_account}
        return self.post(
            url=""https://api.weixin.qq.com/cgi-bin/message/custom/send"",
            data=data
        )",1.0,0.0,0.0,2.0,3.0,1.0575199127197266,-0.07345010340213776,-0.05126376822590828,1.1127809286117554,2.504652738571167,3.0,2.045586969703436,3.0,3.0
"def add_pending(self, panel_obj, hgnc_gene, action, info=None):
        valid_actions = ['add', 'delete', 'edit']
        if action not in valid_actions:
            raise ValueError(""Invalid action {0}"".format(action))
        info = info or {}
        pending_action = {
            'hgnc_id': hgnc_gene['hgnc_id'],
            'action': action,
            'info': info,
            'symbol': hgnc_gene['hgnc_symbol'],
        }
        updated_panel = self.panel_collection.find_one_and_update(
            {'_id': panel_obj['_id']},
            {
                '$addToSet': {
                    'pending': pending_action
                }
            },
            return_document=pymongo.ReturnDocument.AFTER
        )
        return updated_panel",1.0,1.0,0.0,1.0,3.0,0.6911773681640625,0.24511279165744781,0.7413124442100525,0.9345906376838684,2.7429654598236084,3.0,2.612193241715431,3.0,3.0
"def cloudant_bluemix(vcap_services, instance_name=None, service_name=None, **kwargs):
    cloudant_session = Cloudant.bluemix(
        vcap_services,
        instance_name=instance_name,
        service_name=service_name,
        **kwargs
    )
    cloudant_session.connect()
    yield cloudant_session
    cloudant_session.disconnect()",1.0,0.0,0.0,1.0,2.0,0.9908143281936646,0.06287500262260437,0.15482638776302338,0.9117403030395508,2.1544883251190186,2.0,2.120256021618843,2.0,2.0
"def get_user_detail(self, req, account, user):
        path = quote('/v1/%s/%s/%s' % (self.auth_account, account, user))
        resp = self.make_pre_authed_request(
            req.environ, 'GET', path).get_response(self.app)
        if resp.status_int == 404:
            return None
        if resp.status_int // 100 != 2:
            raise Exception('Could not get user object: %s %s' %
                            (path, resp.status))
        return resp.body",2.0,0.0,0.0,1.0,3.0,1.5255858898162842,-0.029699496924877167,0.06478936970233917,1.0418275594711304,2.7252120971679688,3.0,2.6025033220648766,3.0,3.0
"def user_get_messages(self, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_messages_with_http_info(**kwargs)
        else:
            (data) = self.user_get_messages_with_http_info(**kwargs)
            return data",2.0,0.0,0.0,1.0,3.0,1.8109074831008911,0.026401862502098083,-0.049718473106622696,1.1589184999465942,3.0933454036712646,3.0,2.9465093724429607,3.0,3.0
"def load(self: T, **kwargs) -> T:
        lazy_data = {k: v._data for k, v in self.variables.items()
                     if isinstance(v._data, dask_array_type)}
        if lazy_data:
            import dask.array as da
            evaluated_data = da.compute(*lazy_data.values(), **kwargs)
            for k, data in zip(lazy_data, evaluated_data):
                self.variables[k].data = data
        for k, v in self.variables.items():
            if k not in lazy_data:
                v.load()
        return self",1.0,0.0,0.0,0.0,1.0,0.6081725358963013,0.053006067872047424,0.06604824960231781,0.8700606822967529,1.3826483488082886,1.0,1.5972875356674194,1.0,1.0
"def prompt(message, default=None, strip=True, suffix=' '):
    if default is not None:
        prompt_text = ""{0} [{1}]{2}"".format(message, default, suffix)
    else:
        prompt_text = ""{0}{1}"".format(message, suffix)
    input_value = get_input(prompt_text)
    if input_value and strip:
        input_value = input_value.strip()
    if not input_value:
        input_value = default
    return input_value",1.0,0.0,0.0,1.0,2.0,1.016356348991394,-0.02099813148379326,-0.01110817864537239,0.9653919339179993,2.034701347351074,2.0,1.9496419727802277,2.0,2.0
"def add(self, name, path=None, **kwargs):
        path = path or kwargs.pop('default_path', None)
        if not self._path_is_valid(path):
            return
        if not self._is_unique(name, path):
            p = Project.select().where(
                (Project.name == name) |
                (Project.path == path)
            )[0]
            self._print(self._ERROR_PROJECT_EXISTS.format(name, p.path), 'red')
            return
        Project.create(name=name, path=path)
        self._print(self._SUCCESS_PROJECT_ADDED.format(name), 'green')",1.0,0.0,1.0,1.0,3.0,0.5337666273117065,0.4266330599784851,0.7832673788070679,0.6735724210739136,2.785851240158081,3.0,2.417239487171173,3.0,3.0
"async def get_game_high_scores(self, user_id: base.Integer,
                                   chat_id: typing.Union[base.Integer, None] = None,
                                   message_id: typing.Union[base.Integer, None] = None,
                                   inline_message_id: typing.Union[base.String,
                                                                   None] = None) -> typing.List[types.GameHighScore]:
        payload = generate_payload(**locals())
        result = await self.request(api.Methods.GET_GAME_HIGH_SCORES, payload)
        return [types.GameHighScore(**gamehighscore) for gamehighscore in result]",1.0,0.0,0.0,1.0,2.0,1.2430047988891602,-0.15725919604301453,-0.023493599146604538,1.1800414323806763,2.368884325027466,2.0,2.2422934360802174,2.0,2.0
"def get_all_submissions(course_id, item_id, item_type, read_replica=True):
    submission_qs = Submission.objects
    if read_replica:
        submission_qs = _use_read_replica(submission_qs)
    query = submission_qs.select_related('student_item').filter(
        student_item__course_id=course_id,
        student_item__item_id=item_id,
        student_item__item_type=item_type,
    ).order_by('student_item__student_id', '-submitted_at', '-id').iterator()
    for unused_student_id, row_iter in itertools.groupby(query, operator.attrgetter('student_item.student_id')):
        submission = next(row_iter)
        data = SubmissionSerializer(submission).data
        data['student_id'] = submission.student_item.student_id
        yield data",0.0,0.0,1.0,1.0,2.0,0.9175550937652588,-0.07425658404827118,0.9063922166824341,0.9143418073654175,3.1048269271850586,2.0,2.664032533764839,2.0,3.0
"def GetVSSStoreIdentifiers(self, volume_system, volume_identifiers):
    print_header = True
    while True:
      if print_header:
        self._PrintVSSStoreIdentifiersOverview(
            volume_system, volume_identifiers)
        print_header = False
      self._output_writer.Write('\n')
      lines = self._textwrapper.wrap(self._USER_PROMPT_VSS)
      self._output_writer.Write('\n'.join(lines))
      self._output_writer.Write('\n\nVSS identifier(s): ')
      try:
        selected_volumes = self._ReadSelectedVolumes(
            volume_system, prefix='vss')
        if (not selected_volumes or
            not set(selected_volumes).difference(volume_identifiers)):
          break
      except ValueError:
        pass
      self._output_writer.Write('\n')
      lines = self._textwrapper.wrap(
          'Unsupported VSS identifier(s), please try again or abort with '
          'Ctrl^C.')
      self._output_writer.Write('\n'.join(lines))
      self._output_writer.Write('\n\n')
    return selected_volumes",1.0,0.0,0.0,1.0,2.0,0.9405741691589355,-0.04233679920434952,0.04859110713005066,0.9373341202735901,1.8543641567230225,2.0,1.8841625973582268,2.0,2.0
"def getDefaultConfigObj(taskname,configObj,input_dict={},loadOnly=True):
    if configObj is None:
        configObj = teal.load(taskname)
    elif isinstance(configObj,str):
        if configObj.lower().strip() == 'defaults':
            configObj = teal.load(taskname,defaults=True)
            configObj.filename = taskname.lower()+'.cfg'
        else:
            configObj = teal.load(fileutil.osfn(configObj))
    if input_dict not in [None,{}]:
        validateUserPars(configObj,input_dict)
        cfgpars.mergeConfigObj(configObj, input_dict)
    if not loadOnly:
        configObj = teal.teal(configObj,loadOnly=False)
    return configObj",1.0,0.0,0.0,1.0,2.0,0.7755230665206909,-0.05141671746969223,0.01734524592757225,0.8910391330718994,1.5954524278640747,2.0,1.6324907280504704,2.0,2.0
"def send_video_message(self, user_id, media_id, title=None, description=None):
        video_data = {
            'media_id': media_id,
        }
        if title:
            video_data['title'] = title
        if description:
            video_data['description'] = description
        return self.request.post(
            url='https://api.weixin.qq.com/cgi-bin/message/custom/send',
            data={
                'touser': user_id,
                'msgtype': 'video',
                'video': video_data,
            }
        )",1.0,0.0,0.0,2.0,3.0,1.432975172996521,-0.03487703576683998,-0.07277436554431915,1.2201740741729736,3.0865156650543213,3.0,2.5454978458583355,3.0,3.0
"def get_auth_uri(self, state, scopes=None, implicit=False):
        if state is None or state == '':
            raise AttributeError('""state"" must be non empty, non None string')
        scopes_list = [] if not scopes else scopes
        response_type = 'code' if not implicit else 'token'
        auth_uri = '%s?response_type=%s&redirect_uri=%s&client_id=%s%s%s' % (
            self.oauth_authorize,
            response_type,
            quote(self.redirect_uri, safe=''),
            self.client_id,
            '&scope=%s' % '+'.join(scopes_list) if scopes else '',
            '&state=%s' % state
        )
        if self.secret_key is None and not implicit:
            auth_uri += '&code_challenge_method=S256&code_challenge=%s' % (
                generate_code_challenge(self.code_verifier)
            )
        return auth_uri",1.0,0.0,0.0,1.0,2.0,1.038427710533142,-0.08129914104938507,-0.017244670540094376,0.9803593158721924,2.0122854709625244,2.0,1.920243214815855,2.0,2.0
"def dimensions(self):
        try:
            call = fcntl.ioctl(self.termfd, termios.TIOCGWINSZ, ""\000"" * 8)
        except IOError:
            return (79, 40)
        else:
            height, width = struct.unpack(""hhhh"", call)[:2]
            return (width, height)",0.0,0.0,0.0,1.0,1.0,0.8103194236755371,-0.08349373936653137,-0.05688821151852608,0.8842360377311707,1.6534206867218018,1.0,1.5541735105216503,1.0,2.0
"def import_ed25519_privatekey_from_file(filepath, password=None, prompt=False):
  securesystemslib.formats.PATH_SCHEMA.check_match(filepath)
  if password and prompt:
    raise ValueError(""Passing 'password' and 'prompt' True is not allowed."")
  if password is not None:
    securesystemslib.formats.PASSWORD_SCHEMA.check_match(password)
    if not len(password):
      raise ValueError('Password must be 1 or more characters')
  elif prompt:
    password = get_password('Enter a password for an encrypted RSA'
        ' file \'' + Fore.RED + filepath + Fore.RESET + '\': ',
        confirm=False)
    if len(password) == 0:
      password = None
  with open(filepath, 'rb') as file_object:
    json_str = file_object.read()
    return securesystemslib.keys.\
           import_ed25519key_from_private_json(json_str, password=password)",1.0,0.0,0.0,0.0,1.0,0.9625992178916931,-0.055331751704216,0.0528697595000267,0.9131161570549011,1.914529800415039,1.0,1.873253382742405,1.0,2.0
"def clear(self, models=(), commit=True):
        if not models:
            if os.path.exists(self.path):
                shutil.rmtree(self.path)
        else:
            database = self._database(writable=True)
            for model in models:
                database.delete_document(TERM_PREFIXES[DJANGO_CT] + get_model_ct(model))
            database.close()",1.0,0.0,0.0,0.0,1.0,0.28292807936668396,0.38166531920433044,0.7000830769538879,0.496463418006897,1.8286412954330444,1.0,1.8611398935317993,1.0,2.0
"def _try_close_dirty_tabs(self, exept=None):
        widgets, filenames = self._collect_dirty_tabs(exept=exept)
        if not len(filenames):
            return True
        dlg = DlgUnsavedFiles(self, files=filenames)
        if dlg.exec_() == dlg.Accepted:
            if not dlg.discarded:
                for item in dlg.listWidget.selectedItems():
                    filename = item.text()
                    widget = None
                    for widget in widgets:
                        if widget.file.path == filename:
                            break
                    if widget != exept:
                        self._save_editor(widget)
                        self.removeTab(self.indexOf(widget))
            return True
        return False",0.0,0.0,0.0,1.0,1.0,0.897343099117279,0.0011085635051131248,0.07238055765628815,0.9238328337669373,1.9767862558364868,1.0,1.8946650540456176,1.0,2.0
"def request(self, endpoint, method=""GET"", params=None):
        if endpoint.startswith(""http""):
            url = endpoint
        else:
            url = ""%s/%s.json"" % (self.api_url, endpoint)
        if method != ""GET"":
            if self.api_key is None:
                raise SafecastPyAuthError(""Require an api_key"")
            url = url + ""?api_key={0}"".format(self.api_key)
        content = self._request(url, method=method, params=params, api_call=url)
        return content",1.0,0.0,0.0,1.0,2.0,1.2695688009262085,-0.02353307604789734,-0.0428929440677166,0.9497491121292114,2.364431858062744,2.0,2.152891892939806,2.0,2.0
"def update_user(self):
        if self.user_info_url:
            response = self._access_user_info()
            self.user = self._update_or_create_user(response.data,
                                                    content=response.content)
            return authomatic.core.UserInfoResponse(self.user,
                                                    response.httplib_response)",2.0,0.0,0.0,1.0,3.0,1.2417765855789185,0.08499348163604736,0.0637756735086441,1.008834958076477,2.6557111740112305,3.0,2.399380698800087,3.0,3.0
"def login(cls, email, password):
        try:
            doc = yield cls.view.first(key=email, include_docs=True)
        except couch.NotFound:
            raise exceptions.Unauthorized('Unknown email address')
        user = cls(**doc['doc'])
        verified = user.verify_password(password)
        if not verified:
            raise exceptions.Unauthorized('Invalid password')
        token = yield Token.create(user)
        raise Return((user, token.id))",1.0,1.0,1.0,1.0,4.0,1.0977782011032104,0.21272648870944977,0.7139440774917603,1.0616793632507324,3.258641242980957,4.0,3.086128130555153,4.0,3.0
"def schema_import(conn, dbpath):
    conn.execute(
        ""ATTACH DATABASE ? AS source"", (str(dbpath),))
    conn.execute(
        ""INSERT OR IGNORE INTO profiles (name, data)""
        "" SELECT name, data FROM source.profiles""
        "" WHERE data IS NOT NULL"")
    conn.commit()
    conn.execute(
        ""DETACH DATABASE source"")",1.0,1.0,1.0,0.0,3.0,0.21856598556041718,0.3940275311470032,0.5729631781578064,0.47282037138938904,1.7379206418991089,3.0,1.6583770662546158,3.0,2.0
"def _create_user_agent(self):
        user_agent = '{}/{} {}'.format(pyspacegdn.__title__,
                                       pyspacegdn.__version__,
                                       default_user_agent())
        if self.client_name:
            user_agent = '{}/{} {}'.format(self.client_name,
                                           self.client_version, user_agent)
        return user_agent",0.0,0.0,0.0,0.0,0.0,0.8315292596817017,-0.046179525554180145,-0.06486012041568756,0.8639330267906189,1.58431077003479,0.0,1.5844226405024529,0.0,2.0
"def cookiecutter(template, checkout=None, no_input=False, extra_context=None):
    config_dict = get_user_config()
    template = expand_abbreviations(template, config_dict)
    if 'git@' in template or 'https://' in template:
        repo_dir = clone(
            repo_url=template,
            checkout=checkout,
            clone_to_dir=config_dict['cookiecutters_dir'],
            no_input=no_input
        )
    else:
        repo_dir = template
    context_file = os.path.join(repo_dir, 'cookiecutter.json')
    logging.debug('context_file is {0}'.format(context_file))
    context = generate_context(
        context_file=context_file,
        default_context=config_dict['default_context'],
        extra_context=extra_context,
    )
    generate_files(
        repo_dir=repo_dir,
        context=context
    )",2.0,0.0,0.0,0.0,2.0,0.9646264910697937,0.024808108806610107,0.031033534556627274,0.9019660949707031,1.8755673170089722,2.0,1.9224342294037342,2.0,2.0
"def list_faxes(self, user_id, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_faxes_with_http_info(user_id, **kwargs)
        else:
            (data) = self.list_faxes_with_http_info(user_id, **kwargs)
            return data",2.0,0.0,0.0,1.0,3.0,1.836398959159851,0.026272162795066833,-0.03123832866549492,1.2099686861038208,3.2096989154815674,3.0,3.041401479393244,3.0,3.0
"def get_log_all(self, project, logstore, from_time, to_time, topic=None,
                    query=None, reverse=False, offset=0):
        while True:
            response = self.get_log(project, logstore, from_time, to_time, topic=topic,
                                    query=query, reverse=reverse, offset=offset, size=100)
            yield response
            count = response.get_count()
            offset += count
            if count == 0 or is_stats_query(query):
                break",1.0,0.0,1.0,1.0,3.0,1.0303181409835815,-0.10807297378778458,0.2619757056236267,0.8851760029792786,2.2050740718841553,3.0,2.0693968757987022,3.0,2.0
"def find_magic_file(self, fname, system_only=False, user_only=False):
        loc = None
        if not system_only:
            fpath = self._user_path(self.BINWALK_MAGIC_DIR, fname)
            if os.path.exists(fpath) and common.file_size(fpath) > 0:
                loc = fpath
        if loc is None and not user_only:
            fpath = self._system_path(self.BINWALK_MAGIC_DIR, fname)
            if os.path.exists(fpath) and common.file_size(fpath) > 0:
                loc = fpath
        return fpath",1.0,0.0,0.0,1.0,2.0,0.8154281377792358,-0.11907638609409332,0.006687790155410767,0.8524226546287537,1.5079206228256226,2.0,1.555462196469307,2.0,2.0
"def _getPublicSignupInfo(siteStore):
    for tr in siteStore.query(_SignupTracker):
        si = tr.signupItem
        p = getattr(si, 'prompt', None)
        u = getattr(si, 'prefixURL', None)
        if p is not None and u is not None:
            yield (p, u'/'+u)",0.0,0.0,1.0,1.0,2.0,0.9556183218955994,-0.03449837490916252,0.1886247992515564,0.8842074871063232,2.0624914169311523,2.0,1.9939522333443165,2.0,2.0
"def capture_update_from_model(cls, table_name, record_id, *, update_fields=()):
        include_cols = ()
        if update_fields:
            model_cls = get_connected_model_for_table_name(table_name)
            include_cols = cls._fieldnames_to_colnames(model_cls, update_fields)
        raw_query = sql.SQL().format(
            schema=sql.Identifier(settings.HEROKU_CONNECT_SCHEMA),
            table_name=sql.Identifier(table_name),
            include_cols=sql.SQL(', ').join(sql.Identifier(col) for col in include_cols),
        )
        params = {'record_id': record_id, 'table_name': table_name}
        result_qs = TriggerLog.objects.raw(raw_query, params)
        return list(result_qs)",0.0,1.0,1.0,2.0,4.0,0.3748517632484436,0.1382555514574051,0.37709662318229675,0.5907800793647766,1.622127652168274,4.0,1.480984017252922,4.0,2.0
"def _check_users(users):
    messg = ''
    valid = True
    for user, user_details in six.iteritems(users):
        if not user_details:
            valid = False
            messg += 'Please provide details for username {user}.\n'.format(user=user)
            continue
        if not (isinstance(user_details.get('level'), int) or 0 <= user_details.get('level') <= 15):
            messg += 'Level must be a integer between 0 and 15 for username {user}. Will assume 0.\n'.format(user=user)
    return valid, messg",1.0,0.0,0.0,0.0,1.0,0.9739249348640442,-0.056072428822517395,0.047122422605752945,0.9455739259719849,1.8617254495620728,1.0,1.9105488546192646,1.0,2.0
"def prompt_choices(name, choices, default=None, no_choice=('none',)):
    _choices = []
    options = []
    for choice in choices:
        options.append(choice)
        _choices.append(choice)
    while True:
        rv = prompt(name + '? - (%s)' % ', '.join(options), default)
        rv = rv.lower()
        if rv in no_choice:
            return None
        if rv in _choices:
            return rv",1.0,0.0,0.0,1.0,2.0,0.9338660836219788,-0.04994440823793411,0.06198980286717415,1.0012847185134888,1.8699296712875366,2.0,1.9471961967647076,2.0,2.0
"def modify(self, **kwargs):
        for key in kwargs:
            if key not in ['email', 'cellphone', 'countrycode', 'countryiso',
                           'defaultsmsprovider', 'directtwitter',
                           'twitteruser', 'name']:
                sys.stderr.write(""'%s'"" % key + ' is not a valid argument ' +
                                 'of <PingdomContact>.modify()\n')
        response = self.pingdom.request('PUT', 'notification_contacts/%s' % self.id, kwargs)
        return response.json()['message']",1.0,1.0,0.0,2.0,4.0,1.1150000095367432,0.03128809481859207,0.05848456546664238,1.0183309316635132,2.470860004425049,4.0,2.223103601485491,4.0,2.0
"def rev_parse(cwd,
              rev=None,
              opts='',
              git_opts='',
              user=None,
              password=None,
              ignore_retcode=False,
              output_encoding=None):
    cwd = _expand_path(cwd, user)
    command = ['git'] + _format_git_opts(git_opts)
    command.append('rev-parse')
    command.extend(_format_opts(opts))
    if rev is not None:
        command.append(rev)
    return _git_run(command,
                    cwd=cwd,
                    user=user,
                    password=password,
                    ignore_retcode=ignore_retcode,
                    output_encoding=output_encoding)['stdout']",1.0,0.0,0.0,1.0,2.0,1.020607590675354,-0.004537464119493961,0.03038162551820278,0.905132532119751,1.969814419746399,2.0,1.9515842841938138,2.0,2.0
"def _parse_tuple(tup):
    row_loc, col_loc = slice(None), slice(None)
    if is_tuple(tup):
        row_loc = tup[0]
        if len(tup) == 2:
            col_loc = tup[1]
        if len(tup) > 2:
            raise IndexingError(""Too many indexers"")
    else:
        row_loc = tup
    ndim = _compute_ndim(row_loc, col_loc)
    row_scaler = is_scalar(row_loc)
    col_scaler = is_scalar(col_loc)
    row_loc = [row_loc] if row_scaler else row_loc
    col_loc = [col_loc] if col_scaler else col_loc
    return row_loc, col_loc, ndim, row_scaler, col_scaler",1.0,0.0,0.0,0.0,1.0,0.7742525339126587,-0.058458611369132996,-0.003925371915102005,0.8603739142417908,1.5174835920333862,1.0,1.5722424648702145,1.0,2.0
"def getScienceMetadataRDF(self, pid):
        url = ""{url_base}/scimeta/{pid}/"".format(url_base=self.url_base, pid=pid)
        r = self._request('GET', url)
        if r.status_code != 200:
            if r.status_code == 403:
                raise HydroShareNotAuthorized(('GET', url))
            elif r.status_code == 404:
                raise HydroShareNotFound((pid,))
            else:
                raise HydroShareHTTPException((url, 'GET', r.status_code))
        return str(r.content)",2.0,0.0,0.0,1.0,3.0,1.7240806818008423,-0.009216607548296452,0.05832460895180702,1.0674852132797241,3.0669336318969727,3.0,2.840673896484077,3.0,3.0
"def extract_feature(self, extractor, force_extraction=False, verbose=0, add_args=None, custom_name=None):
        if self._prepopulated is False:
            raise errors.EmptyDatabase(self.dbpath)
        else:
            return extract_feature_base(self.dbpath, self.path_to_set, self._set_object, extractor, force_extraction,
                                        verbose, add_args, custom_name)",0.0,0.0,1.0,1.0,2.0,0.5336747169494629,0.02657569944858551,0.09379410743713379,0.7269532084465027,1.4496634006500244,2.0,1.3809977322816849,2.0,1.0
"def _GetTSKPartitionIdentifiers(self, scan_node):
    if not scan_node or not scan_node.path_spec:
      raise errors.ScannerError('Invalid scan node.')
    volume_system = tsk_volume_system.TSKVolumeSystem()
    volume_system.Open(scan_node.path_spec)
    volume_identifiers = self._source_scanner.GetVolumeIdentifiers(
        volume_system)
    if not volume_identifiers:
      return []
    if len(volume_identifiers) == 1:
      return volume_identifiers
    if not self._mediator:
      raise errors.ScannerError(
          'Unable to proceed. Partitions found but no mediator to determine '
          'how they should be used.')
    try:
      volume_identifiers = self._mediator.GetPartitionIdentifiers(
          volume_system, volume_identifiers)
    except KeyboardInterrupt:
      raise errors.UserAbort('File system scan aborted.')
    return self._NormalizedVolumeIdentifiers(
        volume_system, volume_identifiers, prefix='p')",1.0,0.0,0.0,0.0,1.0,0.974818229675293,-0.0036949748173356056,0.21070429682731628,1.038614273071289,2.221625566482544,1.0,2.2204418247565627,1.0,2.0
"def v1_subfolder_list(request, response, kvlclient, fid):
    fid = urllib.unquote(fid)
    try:
        return sorted(imap(attrgetter('name'),
                           ifilter(lambda it: it.is_folder(),
                                   new_folders(kvlclient, request).list(fid))))
    except KeyError:
        response.status = 404
        return []",2.0,0.0,0.0,1.0,3.0,0.9328292608261108,-0.03416973352432251,0.09707355499267578,0.9128497242927551,1.9981518983840942,3.0,1.9085828065872192,3.0,2.0
"def list_liked_topics(self, user_alias=None, start=0):
        user_alias = user_alias or self.api.user_alias
        xml = self.api.xml(API_GROUP_LIST_USER_LIKED_TOPICS % user_alias, params={'start': start})
        return build_list_result(self._parse_topic_table(xml, 'title,comment,time,group'), xml)",2.0,0.0,0.0,1.0,3.0,1.4822056293487549,-0.11001618951559067,0.06975216418504715,1.069217324256897,2.8206241130828857,3.0,2.5111589282751083,3.0,3.0
"def loop(self):
        while True:
            text = compat.input('ctl > ')
            command, args = self.parse_input(text)
            if not command:
                continue
            response = self.call(command, *args)
            response.show()",1.0,0.0,0.0,1.0,2.0,0.9654517769813538,-0.06281395256519318,0.0057609714567661285,0.899821400642395,1.9985142946243286,2.0,1.8082201965153217,2.0,2.0
"def get_albums(self, limit=None):
        url = (self._imgur._base_url + ""/3/account/{0}/albums/{1}"".format(self.name,
                                                                       '{}'))
        resp = self._imgur._send_request(url, limit=limit)
        return [Album(alb, self._imgur, False) for alb in resp]",2.0,0.0,0.0,1.0,3.0,1.5373302698135376,-0.0011515254154801369,0.002620317041873932,1.0776177644729614,2.7169697284698486,3.0,2.616416825912893,3.0,3.0
"def generate(self,
                 key=""india"",
                 host=""india.futuresystems.org"",
                 username=None,
                 force=False,
                 verbose=False):
        data = {
            ""host"": host,
            ""key"": key,
            ""username"": username
        }
        if verbose and key in self.names():
            Console.error(""{key} already in ~/.ssh/config"".format(**data), traceflag=False)
            return """"
        else:
            entry = dedent(.format(**data))
        try:
            with open(self.filename, ""a"") as config_ssh:
                config_ssh.write(entry)
            config_ssh.close()
            self.load()
            if verbose:
                Console.ok(""Added india to ~/.ssh/config"")
        except Exception as e:
            if verbose:
                Console.error(e.message)",1.0,0.0,0.0,1.0,2.0,0.9344739317893982,-0.00028564129024744034,-0.03661005571484566,0.8816757798194885,1.7973603010177612,2.0,1.7792540146037936,2.0,2.0
"def _is_loggedin(self, auth_secret):
        userid = self._rc.hget(pytwis_constants.AUTHS_KEY, auth_secret)
        if userid is None:
            return (False, None)
        userid_profile_key = pytwis_constants.USER_PROFILE_KEY_FORMAT.format(userid)
        stored_auth_secret = self._rc.hget(userid_profile_key, pytwis_constants.AUTH_KEY)
        if auth_secret == stored_auth_secret:
            return (True, userid)
        return (False, None)",1.0,0.0,0.0,1.0,2.0,0.9552614092826843,-0.052455708384513855,0.06405399739742279,0.843227207660675,1.9162336587905884,2.0,1.8100869059562683,2.0,2.0
"def get_valid_value(prompt, validator, default=None):
    ans = get_value(prompt, default)
    while not validator(ans):
        try:
            print validator.error_message
        except AttributeError:
            print 'Invalid value.'
        ans = get_value(prompt, default)
    return ans",1.0,0.0,0.0,1.0,2.0,0.9321536421775818,-0.0783056765794754,-0.002705831080675125,0.9424434900283813,1.844510555267334,2.0,1.7935856245458126,2.0,2.0
"def GetDate(text=None, selected=None, **kwargs):
    args = ['--date-format=%d/%m/%Y']
    if text:
        args.append('--text=%s' % text)
    if selected:
        args.append('--day=%d' % selected.day)
        args.append('--month=%d' % selected.month)
        args.append('--year=%d' % selected.year)
    for generic_args in kwargs_helper(kwargs):
        args.append('--%s=%s' % generic_args)
    p = run_zenity('--calendar', *args)
    if p.wait() == 0:
        retval = p.stdout.read().strip()
        day, month, year = [int(x) for x in retval.split('/')]
        return date(year, month, day)",1.0,0.0,0.0,1.0,2.0,1.0536609888076782,-0.07597450911998749,0.07180716097354889,0.9625386595726013,2.1552462577819824,2.0,2.012032300233841,2.0,2.0
"def direct_to_user_template(request, username, template_name,
                            extra_context=None):
    user = get_object_or_404(get_user_model(), username__iexact=username)
    if not extra_context:
        extra_context = dict()
    extra_context['viewed_user'] = user
    extra_context['profile'] = user.get_profile()
    return ExtraContextTemplateView.as_view(template_name=template_name,
                                        extra_context=extra_context)(request)",1.0,0.0,1.0,2.0,4.0,1.0633971691131592,-0.011780583299696445,0.5390486717224121,1.021232008934021,2.8981993198394775,4.0,2.611897266469896,4.0,3.0
"def transfer_request_notifications(user):
    orgs = [o for o in user.organizations if o.is_member(user)]
    notifications = []
    qs = Transfer.objects(recipient__in=[user] + orgs, status='pending')
    qs = qs.only('id', 'created', 'subject')
    for transfer in qs.no_dereference():
        notifications.append((transfer.created, {
            'id': transfer.id,
            'subject': {
                'class': transfer.subject['_cls'].lower(),
                'id': transfer.subject['_ref'].id
            }
        }))
    return notifications",1.0,0.0,1.0,1.0,3.0,0.6883246302604675,0.021345213055610657,0.8836994767189026,0.9007321000099182,2.9850447177886963,3.0,2.494101420044899,3.0,3.0
"def check_acceptable_xmx(xmx_string):
    acceptable_xmx = True
    acceptable_suffixes = ['K', 'M', 'G']
    if xmx_string[-1].upper() not in acceptable_suffixes:
        acceptable_xmx = False
        logging.error('ERROR: Memory must be specified as K (kilobytes), M (megabytes), or G (gigabytes). Your specified '
                      'suffix was {}.'.format(xmx_string[-1]))
    if '.' in xmx_string:
        acceptable_xmx = False
        logging.error('ERROR: Xmx strings must be integers, floating point numbers are not accepted.')
    if not str.isdigit(xmx_string[:-1]):
        acceptable_xmx = False
        logging.error('ERROR: The amount of memory requested was not an integer.')
    return acceptable_xmx",0.0,0.0,0.0,1.0,1.0,0.9189109206199646,-0.03627412021160126,0.020627912133932114,0.8838997483253479,1.733381748199463,1.0,1.7871644608676434,1.0,2.0
"def get_all_knoreq_user_objects(self, include_machine = False):
		logger.debug('Polling AD for all user objects, machine accounts included: %s'% include_machine)
		if include_machine == True:
			ldap_filter = r'(userAccountControl:1.2.840.113556.1.4.803:=4194304)'
		else:
			ldap_filter = r'(&(userAccountControl:1.2.840.113556.1.4.803:=4194304)(!(sAMAccountName = *$)))'
		attributes = MSADUser.ATTRS
		for entry in self.pagedsearch(ldap_filter, attributes):
			yield MSADUser.from_ldap(entry, self._ldapinfo)
		logger.debug('Finished polling for entries!')",0.0,0.0,1.0,0.0,1.0,1.5651391744613647,-0.046707428991794586,0.4440283477306366,0.9870599508285522,3.1162352561950684,1.0,2.949520044028759,1.0,3.0
"def mktz(zone=None):
    if zone is None:
        zone = tzlocal.get_localzone().zone
    zone = six.u(zone)
    tz = dateutil.tz.gettz(zone)
    if not tz:
        raise TimezoneError('Timezone ""%s"" can not be read' % (zone))
    if not hasattr(tz, 'zone'):
        tz.zone = zone
        for p in dateutil.tz.TZPATHS:
            if zone.startswith(p):
                tz.zone = zone[len(p) + 1:]
                break
    return tz",1.0,0.0,0.0,1.0,2.0,0.8471872210502625,0.00868761446326971,0.11760647594928741,0.7890682220458984,1.6784112453460693,2.0,1.762549533508718,2.0,2.0
"def disable_device(self):
        cmd_response = self.__send_command(const.CMD_DISABLEDEVICE)
        if cmd_response.get('status'):
            self.is_enabled = False
            return True
        else:
            raise ZKErrorResponse(""Can't disable device"")",1.0,0.0,0.0,1.0,2.0,0.9205801486968994,-0.012794562615454197,0.021632134914398193,0.9381800293922424,2.0747551918029785,2.0,1.8675977503880858,2.0,2.0
"def create_user_id(self, user_id, app_id, cidr_block=None, mount_point='app-id', **kwargs):
        if isinstance(app_id, (list, set, tuple)):
            app_id = ','.join(app_id)
        params = {
            'value': app_id
        }
        if cidr_block:
            params['cidr_block'] = cidr_block
        params.update(kwargs)
        return self._adapter.post('/v1/auth/{}/map/user-id/{}'.format(mount_point, user_id), json=params)",1.0,0.0,0.0,1.0,2.0,1.3366769552230835,0.0501655638217926,0.029224969446659088,1.1517112255096436,2.8995413780212402,2.0,2.5677787140011787,2.0,3.0
"def _concat_queries(queries, operators='__and__'):
    if not queries:
        raise ValueError('Expected some `queries`, got {}.'.format(queries))
    if len(queries) == 1:
        return queries[0]
    if isinstance(operators, str):
        operators = [operators] * (len(queries) - 1)
    if len(queries) - 1 != len(operators):
        raise ValueError('Expected `operators` to be a string or a list with the same'
                         ' length as `field_names` ({}), got {}.'.format(len(queries),
                                                                         operators))
    first, rest, end = queries[0], queries[1:-1], queries[-1:][0]
    bigop = getattr(first, operators[0])
    for i, q in enumerate(rest):
        bigop = getattr(bigop(q), operators[i])
    return bigop(end)",0.0,0.0,1.0,0.0,1.0,0.775101900100708,-0.05290094017982483,0.0622677318751812,0.8820779919624329,1.5166324377059937,1.0,1.6665466837584972,1.0,2.0
"def _save_table(
        self,
        raw=False,
        cls=None,
        force_insert=False,
        force_update=False,
        using=None,
        update_fields=None,
    ):
        updated = super(ModelMixin, self)._save_table(
            raw=raw,
            cls=cls,
            force_insert=force_insert,
            force_update=force_update,
            using=using,
            update_fields=update_fields,
        )
        self._linguist.decider.objects.save_translations([self])
        return updated",0.0,1.0,0.0,0.0,1.0,0.5736404061317444,0.20921726524829865,0.2850230634212494,0.7170007228851318,1.7797077894210815,1.0,1.7848814576864243,1.0,2.0
"def get_visible_profiles(self, user=None):
        profiles = self.all()
        filter_kwargs = {'user__is_active': True}
        profiles = profiles.filter(**filter_kwargs)
        if user and isinstance(user, AnonymousUser):
            profiles = profiles.exclude(Q(privacy='closed') | Q(privacy='registered'))
        else: profiles = profiles.exclude(Q(privacy='closed'))
        return profiles",1.0,0.0,1.0,1.0,3.0,0.9192313551902771,-0.13379569351673126,0.7100136876106262,0.9427981972694397,2.8460662364959717,3.0,2.4382475465536118,3.0,3.0
"def upload_signing_cert(self, cert_body, user_name=None):
        params = {'CertificateBody' : cert_body}
        if user_name:
            params['UserName'] = user_name
        return self.get_response('UploadSigningCertificate', params,
                                 verb='POST')",1.0,0.0,0.0,1.0,2.0,1.3924497365951538,-0.00044332537800073624,-0.025399114936590195,1.1244609355926514,2.8168649673461914,2.0,2.4910682318732142,2.0,3.0
"def _define_range(self, sequences):
        sequence_count = 0
        total_sequence = 0
        for record in SeqIO.parse(open(sequences), 'fasta'):
            total_sequence+=1
            sequence_count+=len(record.seq)
        max_range = (sequence_count/total_sequence)*1.5
        return max_range",1.0,0.0,0.0,0.0,1.0,0.7102727293968201,-0.07841400057077408,0.019546855241060257,0.8249155282974243,1.4866914749145508,1.0,1.4763211123645306,1.0,1.0
"def _get_storage_model():
    storage_model_settings = getattr(django.conf.settings,
                                     'GOOGLE_OAUTH2_STORAGE_MODEL', None)
    if storage_model_settings is not None:
        return (storage_model_settings['model'],
                storage_model_settings['user_property'],
                storage_model_settings['credentials_property'])
    else:
        return None, None, None",0.0,0.0,1.0,1.0,2.0,0.8384652733802795,-0.05294623225927353,0.11078816652297974,0.887488067150116,1.82181978225708,2.0,1.7837952747941017,2.0,2.0
"def TextInfo(filename=None, editable=False, **kwargs):
    args = []
    if filename:
        args.append('--filename=%s' % filename)
    if editable:
        args.append('--editable')
    for generic_args in kwargs_helper(kwargs):
        args.append('--%s=%s' % generic_args)
    p = run_zenity('--text-info', *args)
    if p.wait() == 0:
        return p.stdout.read()",1.0,0.0,0.0,1.0,2.0,1.0464309453964233,-0.02167089283466339,0.006846070289611816,0.9361317157745361,1.9664992094039917,2.0,1.967737838625908,2.0,2.0
"def host_create(host, groups, interfaces, **kwargs):
    conn_args = _login(**kwargs)
    ret = {}
    try:
        if conn_args:
            method = 'host.create'
            params = {""host"": host}
            if not isinstance(groups, list):
                groups = [groups]
            grps = []
            for group in groups:
                grps.append({""groupid"": group})
            params['groups'] = grps
            if not isinstance(interfaces, list):
                interfaces = [interfaces]
            params['interfaces'] = interfaces
            params = _params_extend(params, _ignore_name=True, **kwargs)
            ret = _query(method, params, conn_args['url'], conn_args['auth'])
            return ret['result']['hostids']
        else:
            raise KeyError
    except KeyError:
        return ret",1.0,1.0,0.0,2.0,4.0,0.9911233186721802,0.06732665747404099,0.11639855802059174,1.0148229598999023,2.4079978466033936,4.0,2.1896714940667152,4.0,2.0
"async def _run_sql(database, operation, *args, **kwargs):
    __log__.debug((operation, args, kwargs))
    with peewee.__exception_wrapper__:
        cursor = await database.cursor_async()
        try:
            await cursor.execute(operation, *args, **kwargs)
        except:
            await cursor.release()
            raise
        return cursor",0.0,1.0,1.0,0.0,2.0,0.402091383934021,0.2550603151321411,0.4426575303077698,0.6446709632873535,1.8267003297805786,2.0,1.7444801926612854,2.0,2.0
"def set_monitor(self, monitor):
        if type(monitor) != bool:
            raise InvalidInput(""Monitor value must be bool"")
        self._roast['record'] = bool2int(monitor)
        self._q.put(self._config)
        if self._roast['record']:
            self._roast_start = now_time(str=True)
            self._roast['start_time'] = self._roast_start
        else:
            self._roast_end = now_time(str=True)
            self._roast['end_time'] = self._roast_end
            self._roast['date'] = now_date(str=True)
            et = load_time(self._roast['end_time'])
            st = load_time(self._roast['start_time'])
            self._roast['duration'] = timedelta2period(et - st)
        return self.get_roast_properties()",1.0,0.0,0.0,1.0,2.0,0.7095692157745361,0.06939612329006195,0.15735164284706116,0.7991013526916504,1.7911781072616577,2.0,1.7354183346033096,2.0,2.0
"def add_features(self, features, append=True, merge='outer',
                     duplicates='ignore', min_studies=0.0, threshold=0.001):
        if (not append) or not hasattr(self, 'feature_table'):
            self.feature_table = FeatureTable(self)
        self.feature_table.add_features(features, merge=merge,
                                        duplicates=duplicates,
                                        min_studies=min_studies,
                                        threshold=threshold)",1.0,0.0,0.0,0.0,1.0,0.7534118890762329,-0.05952901393175125,-0.004217129200696945,0.8277019262313843,1.5321950912475586,1.0,1.517367672175169,1.0,2.0
"def locale(self) -> tornado.locale.Locale:
        if not hasattr(self, ""_locale""):
            loc = self.get_user_locale()
            if loc is not None:
                self._locale = loc
            else:
                self._locale = self.get_browser_locale()
                assert self._locale
        return self._locale",0.0,0.0,0.0,1.0,1.0,0.8436398506164551,-0.051638878881931305,0.07963000237941742,0.860533595085144,1.6155048608779907,1.0,1.7321645691990852,1.0,2.0
"def invite_by_email(self, email, sender=None, request=None, **kwargs):
        try:
            user = self.user_model.objects.get(email=email)
        except self.user_model.DoesNotExist:
            if ""username"" in inspect.getargspec(
                self.user_model.objects.create_user
            ).args:
                user = self.user_model.objects.create(
                    username=self.get_username(),
                    email=email,
                    password=self.user_model.objects.make_random_password(),
                )
            else:
                user = self.user_model.objects.create(
                    email=email, password=self.user_model.objects.make_random_password()
                )
            user.is_active = False
            user.save()
        self.send_invitation(user, sender, **kwargs)
        return user",1.0,1.0,1.0,1.0,4.0,0.6279825568199158,0.0993461161851883,0.8722688555717468,0.887495219707489,2.8001744747161865,4.0,2.48709274828434,4.0,3.0
"def update_user(self, id, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_with_http_info(id, **kwargs)
        else:
            (data) = self.update_user_with_http_info(id, **kwargs)
            return data",2.0,0.0,0.0,1.0,3.0,1.5971062183380127,0.09339676797389984,-0.03824952617287636,1.2153924703598022,3.1688501834869385,3.0,2.8676459304988384,3.0,3.0
"def variant(self, case_id, variant_id):
        variant_id = int(variant_id)
        gemini_query = ""SELECT * from variants WHERE variant_id = {0}"".format(
            variant_id
        )
        individuals = []
        case_obj = self.case(case_id)
        for individual in case_obj.individuals:
            individuals.append(individual)
        self.db = case_obj.variant_source
        self.variant_type = case_obj.variant_type
        gq = GeminiQuery(self.db)
        gq.run(gemini_query)
        for gemini_variant in gq:
            variant = self._format_variant(
                case_id=case_id,
                gemini_variant=gemini_variant,
                individual_objs=individuals,
                index=gemini_variant['variant_id'],
                add_all_info = True
            )
            return variant
        return None",1.0,0.0,1.0,1.0,3.0,0.3313305675983429,0.1427415907382965,1.1162593364715576,0.6693544387817383,2.67978572845459,3.0,2.2596859335899353,3.0,3.0
"def schema_exists(dbname, name, user=None,
                  db_user=None, db_password=None,
                  db_host=None, db_port=None):
    return bool(
        schema_get(dbname, name, user=user,
                   db_user=db_user,
                   db_host=db_host,
                   db_port=db_port,
                   db_password=db_password))",1.0,0.0,1.0,1.0,3.0,0.8562661409378052,0.03221841901540756,0.24833159148693085,0.7377570271492004,1.8095130920410156,3.0,1.874573178589344,3.0,2.0
"def resolve(self, authorization: http.Header):
        from django_apistar.authentication.models import Token
        if authorization is None:
            return None
        scheme, token = authorization.split()
        if scheme.lower() != 'bearer':
            return None
        try:
            user = Token.objects.get(key=token).user
        except Token.DoesNotExist:
            return None
        return user",1.0,0.0,1.0,1.0,3.0,0.8965370059013367,0.0033403849229216576,0.6946702599525452,0.9327611327171326,2.868168592453003,3.0,2.527308783493936,3.0,3.0
"def run(self, value, errors, request):
        thing = super(ViewableDBThing, self).run(value, errors, request)
        if errors:
            return None
        if not thing.can_view(request.user):
            message = 'Insufficient permissions for {0}'.format(self.param)
            raise HTTPForbidden(message)
        return thing",2.0,0.0,1.0,1.0,4.0,0.8772887587547302,-0.023844070732593536,0.280309796333313,0.9203211069107056,2.2319633960723877,4.0,2.0540755912661552,4.0,2.0
"def get(datasets_identifiers, identifier_type='hid', history_id=None):
    history_id = history_id or os.environ['HISTORY_ID']
    gi = get_galaxy_connection(history_id=history_id, obj=False)
    for dataset_identifier in datasets_identifiers:
        file_path = '/import/%s' % dataset_identifier
        log.debug('Downloading gx=%s history=%s dataset=%s', gi, history_id, dataset_identifier)
        if not os.path.exists(file_path):
            hc = HistoryClient(gi)
            dc = DatasetClient(gi)
            history = hc.show_history(history_id, contents=True)
            datasets = {ds[identifier_type]: ds['id'] for ds in history}
            if identifier_type == 'hid':
                dataset_identifier = int(dataset_identifier)
            dc.download_dataset(datasets[dataset_identifier], file_path=file_path, use_default_filename=False)
        else:
            log.debug('Cached, not re-downloading')
    return file_path",0.0,1.0,0.0,1.0,2.0,1.159152626991272,-0.0078734727576375,0.22034144401550293,0.9386181235313416,2.424793243408203,2.0,2.310238721780479,2.0,2.0
"def get_sqlserver_product_version(engine: ""Engine"") -> Tuple[int]:
    assert is_sqlserver(engine), (
        ""Only call get_sqlserver_product_version() for Microsoft SQL Server ""
        ""instances.""
    )
    sql = ""SELECT CAST(SERVERPROPERTY('ProductVersion') AS VARCHAR)""
    rp = engine.execute(sql)
    row = rp.fetchone()
    dotted_version = row[0]
    return tuple(int(x) for x in dotted_version.split("".""))",1.0,0.0,1.0,1.0,3.0,0.6858541369438171,0.06309527903795242,0.6243162155151367,0.727595329284668,2.2729592323303223,3.0,2.1008609607815742,3.0,2.0
"def create_token(self, data, options=None):
        if not options:
            options = {}
        options.update({'admin': self.admin, 'debug': self.debug})
        claims = self._create_options_claims(options)
        claims['v'] = self.TOKEN_VERSION
        claims['iat'] = int(time.mktime(time.gmtime()))
        claims['d'] = data
        return self._encode_token(self.secret, claims)",0.0,0.0,0.0,1.0,1.0,0.9512304663658142,0.030576661229133606,0.03643270209431648,0.9148646593093872,2.039644956588745,1.0,1.9331044889986515,1.0,2.0
"def update(self, key, data):
        if key:
            spec = {'_id': key}
        write = data.copy()
        response = self._collection.update(
            spec, {'$set': write}, multi=False, upsert=False, manipulate=True)
        if response.get('ok') != 1:
            raise SimplMongoError(""Error updating document '%s': %s"" %
                                  (spec.get('_id'), response.errmsg))
        LOG.debug(""DB UPDATE: %s.%s"", self.collection_name, response)
        return response.get('n')",0.0,1.0,1.0,0.0,2.0,0.44702720642089844,0.42179661989212036,0.6385887265205383,0.6910079717636108,2.2604403495788574,2.0,2.198420524597168,2.0,2.0
"def fromGeoCoordinateString(self, sr, strings,
                                conversionType, conversionMode=None):
        url = self._url + ""/fromGeoCoordinateString""
        params = {
            ""f"" : ""json"",
            ""sr"" : sr,
            ""strings"" : strings,
            ""conversionType"" : conversionType
        }
        if not conversionMode is None:
            params['conversionMode'] = conversionMode
        return self._post(url=url, param_dict=params,
                             securityHandler=self._securityHandler,
                             proxy_url=self._proxy_url,
                             proxy_port=self._proxy_port)",1.0,0.0,0.0,1.0,2.0,1.310668706893921,-0.04499632120132446,-0.08140397071838379,1.083806037902832,2.6738483905792236,2.0,2.2680744528770447,2.0,3.0
"def add_candidate_adapter_ports(self, ports):
        body = {
            'adapter-port-uris': [p.uri for p in ports],
        }
        self.manager.session.post(
            self.uri + '/operations/add-candidate-adapter-ports',
            body=body)",0.0,0.0,0.0,1.0,1.0,1.2975873947143555,0.07628067582845688,0.037653855979442596,1.1298530101776123,2.8267548084259033,1.0,2.5413749366998672,1.0,3.0
"def rvs(self, random_state=None):
        r
        if self.dist is None:
            return self.value
        rs = check_random_state(random_state)
        samples = self.dist.rvs(size=self.shape, random_state=rs)
        samples = self.bounds.clip(samples)
        return samples",0.0,0.0,0.0,1.0,1.0,0.7474080324172974,-0.031436987221241,0.10899601876735687,0.8484126329421997,1.5828322172164917,1.0,1.673379696905613,1.0,2.0
"def parse_date_input(value):
    try:
        limit = parse_date(value)
    except ValueError:
        limit = None
    if limit is None:
        raise ValueError(""'{}' is not a valid date."".format(value))
    limit = datetime(limit.year, limit.month, limit.day)
    if settings.USE_TZ:
        limit = make_aware(limit)
    return limit",1.0,0.0,0.0,1.0,2.0,0.8677151799201965,-0.04240095615386963,0.06110744550824165,0.7694432139396667,1.877179503440857,2.0,1.6558648832142353,2.0,2.0
"def other_gene_name(self, type_=None, name=None, entry_name=None, limit=None, as_df=None):
        q = self.session.query(models.OtherGeneName)
        model_queries_config = (
            (type_, models.OtherGeneName.type_),
            (name, models.OtherGeneName.name),
        )
        q = self.get_model_queries(q, model_queries_config)
        q = self.get_one_to_many_queries(q, ((entry_name, models.Entry.name),))
        return self._limit_and_df(q, limit, as_df)",0.0,0.0,1.0,1.0,2.0,0.7142057418823242,-0.11298207193613052,0.8623066544532776,0.9126185774803162,2.7363808155059814,2.0,2.3761489018797874,2.0,3.0
"def get_notification_channel_id(notify_channel, profile=""telemetry""):
    auth = _auth(profile=profile)
    notification_channel_id = _retrieve_channel_id(notify_channel)
    if not notification_channel_id:
        log.info(""%s channel does not exist, creating."", notify_channel)
        post_url = _get_telemetry_base(profile) + ""/notification-channels""
        data = {
            ""_type"": ""EmailNotificationChannel"",
            ""name"":  notify_channel[:notify_channel.find('@')] + 'EscalationPolicy',
            ""email"": notify_channel
        }
        response = requests.post(post_url, data=salt.utils.json.dumps(data), headers=auth)
        if response.status_code == 200:
            log.info(""Successfully created EscalationPolicy %s with EmailNotificationChannel %s"",
                     data.get('name'), notify_channel)
            notification_channel_id = response.json().get('_id')
            __context__[""telemetry.channels""][notify_channel] = notification_channel_id
        else:
            raise Exception(""Failed to created notification channel {0}"".format(notify_channel))
    return notification_channel_id",2.0,0.0,0.0,2.0,4.0,1.434885025024414,0.015460609458386898,0.13815413415431976,1.0564069747924805,3.0431811809539795,4.0,2.644906743429601,4.0,3.0
"def _get_pgtiou(pgt):
    pgtIou = None
    retries_left = 5
    if not settings.CAS_PGT_FETCH_WAIT:
        retries_left = 1
    while not pgtIou and retries_left:
        try:
            return PgtIOU.objects.get(tgt=pgt)
        except PgtIOU.DoesNotExist:
            if settings.CAS_PGT_FETCH_WAIT:
                time.sleep(1)
            retries_left -= 1
            logger.info('Did not fetch ticket, trying again.  {tries} tries left.'.format(
                tries=retries_left
            ))
    raise CasTicketException(""Could not find pgtIou for pgt %s"" % pgt)",0.0,0.0,1.0,0.0,1.0,1.0871682167053223,-0.0453997403383255,0.9336892366409302,0.9214025139808655,3.1704463958740234,1.0,2.8968602269887924,1.0,3.0
"def facebook_request(self, path, callback, access_token=None,
                           post_args=None, **args):
        url = ""https://graph.facebook.com"" + path
        all_args = {}
        if access_token:
            all_args[""access_token""] = access_token
            all_args.update(args)
            all_args.update(post_args or {})
        if all_args: url += ""?"" + urllib.urlencode(all_args)
        callback = self.async_callback(self._on_facebook_request, callback)
        http = httpclient.AsyncHTTPClient()
        if post_args is not None:
            http.fetch(url, method=""POST"", body=urllib.urlencode(post_args),
                       callback=callback)
        else:
            http.fetch(url, callback=callback)",2.0,0.0,0.0,2.0,4.0,1.3142426013946533,-0.0005872109904885292,-0.05208420380949974,1.054446816444397,2.5954365730285645,4.0,2.316018003039062,4.0,3.0
"def get(cls, user_id, github_id=None, name=None, check_owner=True):
        repo = cls.query.filter((Repository.github_id == github_id) |
                                (Repository.name == name)).one()
        if (check_owner and repo and repo.user_id and
                repo.user_id != int(user_id)):
            raise RepositoryAccessError(
                u'User {user} cannot access repository {repo}({repo_id}).'
                .format(user=user_id, repo=name, repo_id=github_id)
            )
        return repo",1.0,0.0,1.0,1.0,3.0,0.9976847171783447,-0.09588633477687836,0.6942735910415649,0.9537199139595032,2.8545079231262207,3.0,2.5497918874025345,3.0,3.0
"def write_result(self, data):
        data['custom_timers'] = ujson.dumps(data['custom_timers'])
        self.results.append(data)
        if len(self.results) >= 150:
            with db.execution_context():
                with db.atomic():
                    Result.insert_many(self.results).execute()
                del self.results[:]",0.0,1.0,0.0,0.0,1.0,0.052611254155635834,0.49951136112213135,0.9339216351509094,0.5008208751678467,1.9731916189193726,1.0,1.9868651255965233,1.0,2.0
"def get_url_filemeta(url):
    parsed_url = try_parse_url(url)
    if parsed_url is None:
        return None
    if parsed_url.scheme.startswith('ftp'):
        return get_ftp_filemeta(parsed_url)
    url = parsed_url.geturl()
    try:
        r = requests.get(url, stream=True, allow_redirects=True, timeout=5)
        remote_size = r.headers.get('Content-Length', -1)
        return dict(url=url, hostname=parsed_url.hostname, path=parsed_url.path,
                    username=parsed_url.username, remote_size=remote_size,
                    filename=os.path.basename(parsed_url.path))
    except ConnectionError:
        return None
    except (InvalidURL, InvalidSchema, InvalidHeader, MissingSchema):
        return None
    return None",2.0,0.0,0.0,1.0,3.0,1.1855051517486572,-0.003635675646364689,0.023030225187540054,0.9638787508010864,2.1185977458953857,3.0,2.168778452090919,3.0,2.0
"def get_partitioned_view_result(self, partition_key, ddoc_id, view_name,
                                    raw_result=False, **kwargs):
        ddoc = DesignDocument(self, ddoc_id)
        view = View(ddoc, view_name, partition_key=partition_key)
        return self._get_view_result(view, raw_result, **kwargs)",1.0,0.0,1.0,0.0,2.0,0.8215048909187317,-0.13273672759532928,0.14090226590633392,0.8619330525398254,1.8854615688323975,2.0,1.6916034817695618,2.0,2.0
"def prepare_token_request(self, token_url, authorization_response=None,
                              redirect_url=None, state=None, body='', **kwargs):
        if not is_secure_transport(token_url):
            raise InsecureTransportError()
        state = state or self.state
        if authorization_response:
            self.parse_request_uri_response(
                authorization_response, state=state)
        self.redirect_url = redirect_url or self.redirect_url
        body = self.prepare_request_body(body=body,
                                         redirect_uri=self.redirect_url, **kwargs)
        return token_url, FORM_ENC_HEADERS, body",0.0,0.0,0.0,1.0,1.0,1.0025112628936768,-0.05112071335315704,-0.05470367893576622,0.9838917851448059,1.8608237504959106,1.0,1.8805786557495594,1.0,2.0
"def get_dep_statuses(self, ti, session, dep_context=None):
        from airflow.ti_deps.dep_context import DepContext
        if dep_context is None:
            dep_context = DepContext()
        if self.IGNOREABLE and dep_context.ignore_all_deps:
            yield self._passing_status(
                reason=""Context specified all dependencies should be ignored."")
            return
        if self.IS_TASK_DEP and dep_context.ignore_task_deps:
            yield self._passing_status(
                reason=""Context specified all task dependencies should be ignored."")
            return
        for dep_status in self._get_dep_statuses(ti, session, dep_context):
            yield dep_status",1.0,0.0,0.0,1.0,2.0,0.8593184947967529,-0.0628092959523201,0.11848343908786774,0.9386874437332153,1.7734956741333008,2.0,1.853680081665516,2.0,2.0
"def _get_registry_auth(registry_url, config_path):
        username = None
        password = None
        try:
            docker_config = json.load(open(config_path))
        except ValueError:
            return username, password
        if docker_config.get('auths'):
            docker_config = docker_config['auths']
        auth_key = docker_config.get(registry_url, {}).get('auth', None)
        if auth_key:
            username, password = base64.b64decode(auth_key).split(':', 1)
        return username, password",1.0,0.0,0.0,1.0,2.0,0.9854509234428406,-0.026616327464580536,0.02052219584584236,0.9486027359962463,1.8333452939987183,2.0,1.9279595278203487,2.0,2.0
"def proxy_headers(self, proxy):
        headers = {}
        username, password = get_auth_from_url(proxy)
        if username and password:
            headers['Proxy-Authorization'] = _basic_auth_str(username,
                                                             password)
        return headers",1.0,0.0,0.0,1.0,2.0,0.9830794334411621,-0.057509228587150574,-0.04781809076666832,0.9073794484138489,1.781511664390564,2.0,1.785131562501192,2.0,2.0
"def get_object_from_session(entity, key):
    def object_from_session_function(service, message):
        id_ = get_value_from_session(key)(service, message)
        result = service.session.query(entity).get(id_)
        if not result:
            raise SelenolInvalidArgumentException(key, id_)
        return result
    return object_from_session_function",0.0,0.0,1.0,0.0,1.0,0.5129722952842712,-0.0302276611328125,0.568358838558197,0.7141117453575134,1.928770899772644,1.0,1.7652152180671692,1.0,2.0
"def update(self, update_dict=None, raw=False, **kwargs):
        if update_dict is None:
            update_dict = kwargs
        if raw:
            self._collection.update_one({ID_KEY: self[ID_KEY]}, update_dict)
            new_data = self._collection.find_one({ID_KEY: self[ID_KEY]})
            dict.clear(self)
            dict.update(self, new_data)
        else:
            for key, value in update_dict.items():
                self._check_type(key, value)
            dict.update(self, update_dict)
            self._collection.update_one({ID_KEY: self[ID_KEY]}, {SET: update_dict})",1.0,1.0,1.0,1.0,4.0,0.3905550539493561,0.39045450091362,0.9124372005462646,0.6732968688011169,2.6762783527374268,4.0,2.3667436242103577,4.0,3.0
"def fetch(engine, tablename, columns=None, selection=None, **kwargs):
    import pandas as pd
    if columns is None:
        columnstr = '*'
    else:
        columnstr = ', '.join('""%s""' % c for c in columns)
    selectionstr = format_db_selection(selection, engine=engine)
    qstr = 'SELECT %s FROM %s %s' % (columnstr, tablename, selectionstr)
    tab = pd.read_sql(qstr, engine, **kwargs)
    types = tab.apply(lambda x: pd.api.types.infer_dtype(x.values))
    if not tab.empty:
        for col in types[types == 'unicode'].index:
            tab[col] = tab[col].astype(str)
    return Table.from_pandas(tab).filled()",1.0,0.0,1.0,1.0,3.0,0.5671741962432861,0.06651828438043594,0.3857317268848419,0.7093938589096069,1.8104755878448486,3.0,1.728818066418171,3.0,2.0
"def issueViaEmail(self, issuer, email, product, templateData,
                      domainName, httpPort=80):
        ticket = self.createTicket(issuer,
                                   unicode(email, 'ascii'),
                                   product)
        nonce = ticket.nonce
        signupInfo = {'from': 'signup@'+domainName,
                      'to': email,
                      'date': rfc822.formatdate(),
                      'message-id': smtp.messageid(),
                      'link': self.ticketLink(domainName, httpPort, nonce)}
        msg = templateData % signupInfo
        return ticket, _sendEmail(signupInfo['from'], email, msg)",0.0,1.0,0.0,1.0,2.0,0.9926501512527466,-0.020342737436294556,0.005489852279424667,0.9509128928184509,2.10347056388855,2.0,1.9287101589143276,2.0,2.0
"def render_latex(input_text, dpath=None, fname=None, preamb_extra=None,
                 verbose=1, **kwargs):
    import utool as ut
    import vtool as vt
    input_text_ = '\pagenumbering{gobble}\n' + input_text
    img_fname = ut.ensure_ext(fname, ['.jpg'] + list(ut.IMG_EXTENSIONS))
    img_fpath = join(dpath, img_fname)
    pdf_fpath = ut.compile_latex_text(
        input_text_, fname=fname, dpath=dpath, preamb_extra=preamb_extra,
        verbose=verbose, move=False)
    ext = splitext(img_fname)[1]
    fpath_in = ut.convert_pdf_to_image(pdf_fpath, ext=ext, verbose=verbose)
    vt.clipwhite_ondisk(fpath_in, fpath_out=img_fpath, verbose=verbose > 1)
    return img_fpath",1.0,0.0,0.0,1.0,2.0,0.7904230356216431,-0.016828760504722595,-0.003930430859327316,0.9133372902870178,1.6582592725753784,2.0,1.683001134544611,2.0,2.0
"async def authenticate_token_service_url(auth_header: str, credentials: CredentialProvider, service_url: str, channel_id: str) -> ClaimsIdentity:
        identity = await asyncio.ensure_future(
            ChannelValidation.authenticate_token(auth_header, credentials, channel_id))
        service_url_claim = identity.get_claim_value(ChannelValidation.SERVICE_URL_CLAIM)
        if service_url_claim != service_url:
            raise Exception('Unauthorized. service_url claim do not match.')
        return identity",2.0,0.0,0.0,1.0,3.0,1.0285756587982178,-0.04890112578868866,-0.00733141228556633,0.9097293615341187,1.9232240915298462,3.0,1.8820724822580814,3.0,2.0
"def authorize(self, scope=None, redirect_uri=None, state=None):
        _logger.debug(""Called authorize()"")
        params = {'client_id': self.client_id}
        if scope:
            params['scope'] = scope
        if redirect_uri:
            params['redirect_uri'] = redirect_uri
        if state:
            params['state'] = state
        url = self.auth_url + 'authorize?' + urlencode(params)
        _logger.debug(""Redirecting to %s"", url)
        return redirect(url)",1.0,0.0,0.0,1.0,2.0,1.3334977626800537,0.035920649766922,0.02069755271077156,1.0163965225219727,2.518644332885742,2.0,2.40651248767972,2.0,3.0
"def match(self, path, method):
        if path != '/':
            path = path.rstrip('/')
        method = method.upper()
        status = 404
        for p, n, m in self.endpoints:
            matched, url_vars = match_path(p, path)
            if not matched:
                continue
            if method not in m:
                status = 405
                raise HTTPError(status=status, body=f'Method not found: {path} {method}')
            callback, type_hints = m[method]
            type_matched, typed_url_vars = match_url_vars_type(url_vars, type_hints)
            if not type_matched:
                continue
            return callback, typed_url_vars
        raise HTTPError(status=status, body=f'Not found: {path}')",2.0,0.0,0.0,1.0,3.0,0.8900364637374878,-0.05179151892662048,-0.051307033747434616,0.9336764216423035,1.6957837343215942,3.0,1.7206143327057362,3.0,2.0
"def from_user_input(cls, address_book, user_input,
                        supported_private_objects, version, localize_dates):
        contact = cls(address_book, None, supported_private_objects, version,
                localize_dates)
        contact._process_user_input(user_input)
        return contact",0.0,1.0,1.0,0.0,2.0,0.8297007083892822,-0.07375109195709229,0.006457589566707611,0.85389643907547,1.679592490196228,2.0,1.6163036450743675,2.0,2.0
"def introspect_operation(self, operation):
        return {
            'method_name': operation.py_name,
            'api_name': operation.name,
            'docs': self.convert_docs(operation.documentation),
            'params': self.parse_params(operation.params),
            'output': operation.output,
        }",1.0,0.0,0.0,0.0,1.0,0.729489266872406,-0.10498322546482086,-0.02481108531355858,0.8154346346855164,1.5589320659637451,1.0,1.415129590779543,1.0,2.0
"def insert(
        self,
        table_name,
        obj=None,
        database=None,
        overwrite=False,
        partition=None,
        values=None,
        validate=True,
    ):
        table = self.table(table_name, database=database)
        return table.insert(
            obj=obj,
            overwrite=overwrite,
            partition=partition,
            values=values,
            validate=validate,
        )",1.0,1.0,1.0,0.0,3.0,0.48928090929985046,0.28196871280670166,0.3896823823451996,0.681840181350708,1.7330771684646606,3.0,1.8427721858024597,3.0,2.0
"def add_xmlid(cr, module, xmlid, model, res_id, noupdate=False):
    cr.execute(
        ""SELECT id FROM ir_model_data WHERE module=%s AND name=%s ""
        ""AND model=%s"",
        (module, xmlid, model))
    already_exists = cr.fetchone()
    if already_exists:
        return False
    else:
        logged_query(
            cr,
            ""INSERT INTO ir_model_data (create_uid, create_date, ""
            ""write_uid, write_date, date_init, date_update, noupdate, ""
            ""name, module, model, res_id) ""
            ""VALUES (%s, (now() at time zone 'UTC'), %s, ""
            ""(now() at time zone 'UTC'), (now() at time zone 'UTC'), ""
            ""(now() at time zone 'UTC'), %s, %s, %s, %s, %s)"", (
                SUPERUSER_ID, SUPERUSER_ID, noupdate,
                xmlid, module, model, res_id))
        return True",0.0,1.0,1.0,0.0,2.0,0.15074923634529114,0.3739734888076782,0.8873580694198608,0.5959926843643188,2.1598141193389893,2.0,2.008073478937149,2.0,2.0
"def _get_perm_obj_or_404(self, pk=None):
        if pk:
            obj = get_object_or_none(self.core.model, pk=pk)
        else:
            try:
                obj = self.get_obj(False)
            except Http404:
                obj = get_object_or_none(self.core.model, **self.get_obj_filters())
        if not obj:
            raise Http404
        return obj",1.0,0.0,1.0,1.0,3.0,0.6589521765708923,-0.140217587351799,0.8871942162513733,0.888973593711853,2.708204746246338,3.0,2.2949023991823196,3.0,3.0
"def run(self):
        response = None
        root = tkinter.Tk()
        root.withdraw()
        while response is not True:
            response = tkinter.messagebox.askokcancel(title=self.title, message=self.pre_message)
        if self.post_message:
            print(self.post_message)
        self.exit_time = time.time()",1.0,0.0,0.0,1.0,2.0,0.9651454091072083,-0.05368485301733017,0.0316358245909214,0.9637573957443237,2.0505635738372803,2.0,1.9068537764251232,2.0,2.0
"def get_scopes_for(self, user_provided_scopes):
        if user_provided_scopes is None:
            user_provided_scopes = [app_part for app_part in self._oauth_scopes]
        elif isinstance(user_provided_scopes, str):
            user_provided_scopes = [user_provided_scopes]
        if not isinstance(user_provided_scopes, (list, tuple)):
            raise ValueError(
                ""'user_provided_scopes' must be a list or a tuple of strings"")
        scopes = set()
        for app_part in user_provided_scopes:
            for scope in self._oauth_scopes.get(app_part, [(app_part,)]):
                scopes.add(self._prefix_scope(scope))
        return list(scopes)",1.0,0.0,0.0,1.0,2.0,0.8469055891036987,-0.1407848745584488,0.0663071796298027,0.9354208111763,1.6524754762649536,2.0,1.7078487053513527,2.0,2.0
"def __add_bootstrap_tour_step(self, message, selector=None, name=None,
                                  title=None, alignment=None, duration=None):
        if selector != ""html"":
            selector = self.__make_css_match_first_element_only(selector)
            element_row = ""element: '%s',"" % selector
        else:
            element_row = """"
        if not duration:
            duration = ""0""
        else:
            duration = str(float(duration) * 1000.0)
        step = ( % (element_row, title, message, alignment, duration))
        self._tour_steps[name].append(step)",1.0,0.0,0.0,0.0,1.0,0.7936219573020935,-0.03405431658029556,-0.007499024271965027,0.9882017970085144,1.7516671419143677,1.0,1.7402704134583473,1.0,2.0
"def set_message_last_post(cr, uid, pool, models):
    if type(models) is not list:
        models = [models]
    for model in models:
        model_pool = pool[model]
        cr.execute(
            ""UPDATE {table} ""
            ""SET message_last_post=(SELECT max(mm.date) ""
            ""FROM mail_message mm ""
            ""WHERE mm.model=%s ""
            ""AND mm.date IS NOT NULL ""
            ""AND mm.res_id={table}.id)"".format(
                table=model_pool._table), (model,)
        )",1.0,1.0,1.0,0.0,3.0,0.29213646054267883,0.3570461571216583,0.7649545073509216,0.6018068194389343,2.1596078872680664,3.0,2.015943944454193,3.0,2.0
"def enable_device(self):
        cmd_response = self.__send_command(const.CMD_ENABLEDEVICE)
        if cmd_response.get('status'):
            self.is_enabled = True
            return True
        else:
            raise ZKErrorResponse(""Can't enable device"")",1.0,0.0,0.0,0.0,1.0,0.9263685941696167,2.860184758901596e-05,0.010965093970298767,0.9437561631202698,2.0767464637756348,1.0,1.8811184531077743,1.0,2.0
"def user_agent_info(sdk_version, custom_user_agent):
    python_version = ""."".join(str(x) for x in sys.version_info[0:3])
    user_agent = ""ask-python/{} Python/{}"".format(
        sdk_version, python_version)
    if custom_user_agent is None:
        return user_agent
    else:
        return user_agent + "" {}"".format(custom_user_agent)",1.0,0.0,0.0,1.0,2.0,0.9065291285514832,-0.05904846638441086,-0.0032226406037807465,0.871630847454071,1.6839429140090942,2.0,1.7158888690173626,2.0,2.0
"def design_documents(self):
        url = '/'.join((self.database_url, '_all_docs'))
        query = ""startkey=\""_design\""&endkey=\""_design0\""&include_docs=true""
        resp = self.r_session.get(url, params=query)
        resp.raise_for_status()
        data = response_to_json_dict(resp)
        return data['rows']",2.0,0.0,1.0,1.0,4.0,1.558560848236084,-0.030652429908514023,0.22345086932182312,1.0540510416030884,3.0014963150024414,4.0,2.8054103292524815,4.0,3.0
"def get_user_best(self, username, *, mode=OsuMode.osu, limit=50):
        return self._make_req(endpoints.USER_BEST, dict(
            k=self.key,
            u=username,
            type=_username_type(username),
            m=mode.value,
            limit=limit
            ), JsonList(SoloScore))",1.0,0.0,0.0,1.0,2.0,1.7235223054885864,-0.06136076897382736,0.08788542449474335,1.0900118350982666,2.977224349975586,2.0,2.840058796107769,2.0,3.0
"def input_loop():
    while mpstate.status.exit != True:
        try:
            if mpstate.status.exit != True:
                line = input(mpstate.rl.prompt)
        except EOFError:
            mpstate.status.exit = True
            sys.exit(1)
        mpstate.input_queue.put(line)",1.0,0.0,0.0,0.0,1.0,0.9340671896934509,-0.03212788701057434,0.04328320547938347,0.8997370004653931,1.8323113918304443,1.0,1.8449595086276531,1.0,2.0
"def get_reply_to_names(self, mention):
        mention_list = [user['screen_name'] for user in mention['entities']['user_mentions']]
        mention_list.append(mention['user']['screen_name'])
        reply_to_names = set(mention_list)
        reply_to_names.discard(self.screen_name)
        return sorted(list(reply_to_names))",1.0,0.0,0.0,1.0,2.0,0.8793231844902039,-0.06452728062868118,0.14192166924476624,0.8485813736915588,1.8932561874389648,2.0,1.8052989467978477,2.0,2.0
"def create_dataset(self, owner_id, **kwargs):
        request = self.__build_dataset_obj(
            lambda: _swagger.DatasetCreateRequest(
                title=kwargs.get('title'),
                visibility=kwargs.get('visibility')),
            lambda name, url, expand_archive, description, labels:
            _swagger.FileCreateRequest(
                name=name,
                source=_swagger.FileSourceCreateRequest(
                    url=url,
                    expand_archive=expand_archive),
                description=description,
                labels=labels),
            kwargs)
        try:
            (_, _, headers) = self._datasets_api.create_dataset_with_http_info(
                owner_id, request, _return_http_data_only=False)
            if 'Location' in headers:
                return headers['Location']
        except _swagger.rest.ApiException as e:
            raise RestApiError(cause=e)",1.0,0.0,0.0,2.0,3.0,0.8879119157791138,-0.04829750210046768,0.031667497009038925,1.0172979831695557,2.0736708641052246,3.0,1.8885798938572407,3.0,2.0
"def validate(opts):
    try:
        return _validate(opts)
    except ValidationException as e:
        print(""Command line arguments failed validation:"")
        print(e)
        sys.exit(0)
    except ValueError as e:
        print(""Incorrect type passed into anchorhub.validate_opts.validate()\n"")
        print(e)
        sys.exit(0)",1.0,0.0,0.0,1.0,2.0,0.9964457154273987,-0.024385914206504822,-0.049110088497400284,0.9043987393379211,1.779883623123169,2.0,1.8273484520614147,2.0,2.0
"def _resolve_input(variable, variable_name, config_key, config):
    if variable is None:
        try:
            variable = config.get(PROFILE, config_key)
        except NoOptionError:
            raise ValueError((
                'no {} found - either provide a command line argument or '
                'set up a default by running `apparate configure`'
            ).format(variable_name))
    return variable",1.0,0.0,0.0,1.0,2.0,0.8192688822746277,-0.06480060517787933,-0.03673945739865303,0.9074269533157349,1.5596598386764526,2.0,1.6251557730138302,2.0,2.0
"def get(property_name):
    config = _read_config(_USER_CONFIG_FILE)
    section = _MAIN_SECTION_NAME
    try:
        property_value = config.get(section, property_name)
    except (NoOptionError, NoSectionError) as error:
        try:
            config = _read_config(_SYSTEM_CONFIG_FILE)
            property_value = config.get(section, property_name)
        except (NoOptionError, NoSectionError) as error:
            raise NoConfigOptionError(error)
    return property_value",0.0,0.0,0.0,1.0,1.0,0.8563211560249329,-0.05513101816177368,0.05742901191115379,0.897807776927948,1.7555469274520874,1.0,1.756426926702261,1.0,2.0
"def _load(self):
        data = get_data(self.endpoint, self.id_, force_lookup=self.__force_lookup)
        for key, val in data.items():
            if key == 'location_area_encounters' \
                    and self.endpoint == 'pokemon':
                params = val.split('/')[-3:]
                ep, id_, subr = params
                encounters = get_data(ep, int(id_), subr)
                data[key] = [_make_obj(enc) for enc in encounters]
                continue
            if isinstance(val, dict):
                data[key] = _make_obj(val)
            elif isinstance(val, list):
                data[key] = [_make_obj(i) for i in val]
        self.__dict__.update(data)
        return None",1.0,0.0,0.0,0.0,1.0,0.7977983951568604,-0.05503273755311966,0.06627565622329712,0.8734850883483887,1.784076452255249,1.0,1.6825264021754265,1.0,2.0
"def load_hgnc(adapter, genes=None, ensembl_lines=None, hgnc_lines=None, exac_lines=None, mim2gene_lines=None,
              genemap_lines=None, hpo_lines=None, transcripts_lines=None, build='37', omim_api_key=''):
    gene_objs = load_hgnc_genes(
        adapter=adapter,
        genes = genes,
        ensembl_lines=ensembl_lines,
        hgnc_lines=hgnc_lines,
        exac_lines=exac_lines,
        mim2gene_lines=mim2gene_lines,
        genemap_lines=genemap_lines,
        hpo_lines=hpo_lines,
        build=build,
        omim_api_key=omim_api_key,
    )
    ensembl_genes = {}
    for gene_obj in gene_objs:
        ensembl_genes[gene_obj['ensembl_id']] = gene_obj
    transcript_objs = load_transcripts(
        adapter=adapter,
        transcripts_lines=transcripts_lines,
        build=build,
        ensembl_genes=ensembl_genes)",1.0,1.0,0.0,0.0,2.0,1.0550726652145386,-0.018476977944374084,0.13225296139717102,0.9500671029090881,2.0829579830169678,2.0,2.1189157515764236,2.0,2.0
"def create_user(self, projects=None, tasks=None):
        projects = projects or []
        tasks = tasks or []
        dialog = UserCreatorDialog(projects=projects, tasks=tasks, parent=self)
        dialog.exec_()
        user = dialog.user
        if user:
            userdata = djitemdata.UserItemData(user)
            treemodel.TreeItem(userdata, self.users_model.root)
        return user",0.0,1.0,1.0,1.0,3.0,1.0312373638153076,0.08392705023288727,0.40316468477249146,1.0166547298431396,2.9390978813171387,3.0,2.534983828663826,3.0,3.0
"def finish_oauth(self, code):
        r = requests.post(self._login_uri(""/oauth/token""), data={
                ""code"": code,
                ""client_id"": self.client_id,
                ""client_secret"": self.client_secret
            })
        if r.status_code != 200:
            raise ApiError(""OAuth token exchange failed"", status=r.status_code, json=r.json())
        token = r.json()[""access_token""]
        scopes = OAuthScopes.parse(r.json()[""scopes""])
        expiry = datetime.now() + timedelta(seconds=r.json()['expires_in'])
        refresh_token = r.json()['refresh_token']
        return token, scopes, expiry, refresh_token",2.0,0.0,0.0,1.0,3.0,1.4393314123153687,0.010847068391740322,0.058455370366573334,1.0787461996078491,2.7798421382904053,3.0,2.5873800506815314,3.0,3.0
"def did_you_mean(message: str, user_input: str, choices: Sequence[str]) -> str:
    if not choices:
        return message
    else:
        result = {
            difflib.SequenceMatcher(a=user_input, b=choice).ratio(): choice
            for choice in choices
        }
        message += ""\nDid you mean: %s?"" % result[max(result)]
        return message",1.0,0.0,0.0,1.0,2.0,0.9125210046768188,-0.06663821637630463,-0.008642274886369705,0.9827445149421692,1.725156545639038,2.0,1.8199850283563137,2.0,2.0
"def build_auth_uri(endpoint, client_id, redirect_uri=None, scope=None, state=None):
        params = {'response_type': 'code', 'client_id': client_id}
        if redirect_uri is not None:
            params['redirect_uri'] = redirect_uri
        if scope is not None:
            params['scope'] = ' '.join(scope)
        if state is not None:
            params['state'] = state
        return '%s?%s' % (endpoint, urlencode(params))",1.0,0.0,0.0,1.0,2.0,1.1991069316864014,-0.035603683441877365,-0.03391138091683388,1.0000782012939453,2.221389055252075,2.0,2.1296700686216354,2.0,2.0
"def input_password(self, message=None):
        message = self.__prompt_formatter.format_prompt(message)
        try:
            if message:
                return getpass.getpass(message)
            else:
                return getpass.getpass()
        except BaseException:
            self.__screen.println('Warning: Unable to mask input; characters will be echoed to console')
            return self.input(message)",1.0,0.0,0.0,1.0,2.0,0.9315159916877747,-0.06722551584243774,-0.04548775777220726,0.9346641898155212,1.832780122756958,2.0,1.753466907888651,2.0,2.0
"def list_subscriptions(self, user_token):
        response = _request('GET',
            url=self.url_v1('/user/subscriptions'),
            user_agent=self.user_agent,
            user_token=user_token,
        )
        _raise_for_status(response)
        return response.json()['topics']",2.0,0.0,0.0,1.0,3.0,1.8839225769042969,-0.062120720744132996,-0.024753857403993607,1.1023883819580078,3.0567286014556885,3.0,2.899436380714178,3.0,3.0
"def get_course_and_check_rights(self, courseid, taskid=None, allow_all_staff=True):
        try:
            course = self.course_factory.get_course(courseid)
            if allow_all_staff:
                if not self.user_manager.has_staff_rights_on_course(course):
                    raise web.notfound()
            else:
                if not self.user_manager.has_admin_rights_on_course(course):
                    raise web.notfound()
            if taskid is None:
                return course, None
            else:
                return course, course.get_task(taskid)
        except:
            raise web.notfound()",1.0,0.0,1.0,1.0,3.0,1.172463059425354,-0.06632262468338013,0.7175297141075134,0.9680856466293335,2.8917181491851807,3.0,2.791755795478821,3.0,3.0
"def function(self, text=None, entry_name=None, limit=None, as_df=False):
        q = self.session.query(models.Function)
        model_queries_config = (
            (text, models.Function.text),
        )
        q = self.get_model_queries(q, model_queries_config)
        q = self.get_one_to_many_queries(q, ((entry_name, models.Entry.name),))
        return self._limit_and_df(q, limit, as_df)",1.0,0.0,1.0,1.0,3.0,0.677854061126709,-0.10873974859714508,0.909625232219696,0.9168862104415894,2.8458094596862793,3.0,2.3956257551908493,3.0,3.0
"def json_parse(self, response):
        try:
            data = response.json()
        except ValueError:
            data = {'meta': { 'status': 500, 'msg': 'Server Error'}, 'response': {""error"": ""Malformed JSON or HTML was returned.""}}
        if 200 <= data['meta']['status'] <= 399:
            return data['response']
        else:
            return data",1.0,0.0,0.0,1.0,2.0,0.9012911915779114,-0.07648807018995285,-0.030230801552534103,0.9638449549674988,1.942186713218689,2.0,1.7584172748029232,2.0,2.0
"def get_var(self, key):
    'Retrieve one saved variable from the database.'
    vt = quote(self.__vars_table)
    data = self.execute(u'SELECT * FROM %s WHERE `key` = ?' % vt, [key], commit = False)
    if data == []:
      raise NameError(u'The DumpTruck variables table doesn\'t have a value for %s.' % key)
    else:
      tmp = quote(self.__vars_table_tmp)
      row = data[0]
      self.execute(u'DROP TABLE IF EXISTS %s' % tmp, commit = False)
      self.execute(u'CREATE TEMPORARY TABLE %s (`value` %s)' % (tmp, row['type']), commit = False)
      self.execute(u'INSERT INTO %s (`value`) VALUES (?)' % tmp, [row['value']], commit = False)
      value = self.dump(tmp)[0]['value']
      self.execute(u'DROP TABLE %s' % tmp, commit = False)
      return value",0.0,1.0,1.0,0.0,2.0,0.3713422119617462,0.24176844954490662,0.5926572680473328,0.6029873490333557,1.885250449180603,2.0,1.8087552785873413,2.0,2.0
"def remove_users_from_account_group(self, account_id, group_id, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.remove_users_from_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.remove_users_from_account_group_with_http_info(account_id, group_id, **kwargs)
            return data",1.0,0.0,0.0,2.0,3.0,1.3707280158996582,0.013292438350617886,-0.02826092764735222,1.1457017660140991,2.7490732669830322,3.0,2.501461292617023,3.0,3.0
"def send_text_message(self, user_id, content, kf_account=None):
        data = {
            ""touser"": user_id,
            ""msgtype"": ""text"",
            ""text"": {
                ""content"": content
            }
        }
        if kf_account is not None:
            data['customservice'] = {'kf_account': kf_account}
        return self.post(
            url=""https://api.weixin.qq.com/cgi-bin/message/custom/send"",
            data=data
        )",1.0,0.0,0.0,1.0,2.0,1.4734041690826416,-0.03624005615711212,-0.10440146923065186,1.2343920469284058,3.040476083755493,2.0,2.5671546906232834,2.0,3.0
"def login_with_api_key(self, email, api_key, application='Default'):
        parameters = dict()
        parameters['email'] = BaseDriver.email = email
        parameters['apikey'] = BaseDriver.apikey = api_key
        parameters['appname'] = application
        response = self.request('midas.login', parameters)
        if 'token' in response:
            return response['token']
        if 'mfa_token_id':
            return response['mfa_token_id']",2.0,0.0,0.0,1.0,3.0,1.3211231231689453,0.008036552928388119,0.047427669167518616,1.0431305170059204,2.578664779663086,3.0,2.4197178622707725,3.0,3.0
"def climate_stats(self, startclim, endclim, type, **kwargs):
        r
        self._check_geo_param(kwargs)
        kwargs['type'] = type
        kwargs['startclim'] = startclim
        kwargs['endclim'] = endclim
        kwargs['token'] = self.token
        return self._get_response('stations/climatology', kwargs)",2.0,0.0,0.0,1.0,3.0,1.273097276687622,-0.1079941838979721,-0.04554998502135277,1.0380964279174805,2.370065212249756,3.0,2.1576495356857777,3.0,2.0
"def patch_namespaced_deployment(self, name, namespace, body, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_namespaced_deployment_with_http_info(name, namespace, body, **kwargs)
        else:
            (data) = self.patch_namespaced_deployment_with_http_info(name, namespace, body, **kwargs)
            return data",2.0,0.0,0.0,2.0,4.0,0.7974870800971985,0.04874159395694733,-0.09022068977355957,0.9975554943084717,2.044294834136963,4.0,1.753563478589058,4.0,2.0
"def prefixsearch(self, prefix, results=10):
        self._check_query(prefix, ""Prefix must be specified"")
        query_params = {
            ""list"": ""prefixsearch"",
            ""pssearch"": prefix,
            ""pslimit"": (""max"" if results > 500 else results),
            ""psnamespace"": 0,
            ""psoffset"": 0,
        }
        raw_results = self.wiki_request(query_params)
        self._check_error_response(raw_results, prefix)
        return [rec[""title""] for rec in raw_results[""query""][""prefixsearch""]]",2.0,0.0,0.0,1.0,3.0,1.2659891843795776,-0.07871328294277191,0.11915257573127747,0.9877434372901917,2.527508020401001,3.0,2.294171914458275,3.0,3.0
"def hash_folder(folder, regex='[!_]*'):
    file_hashes = {}
    for path in glob.glob(os.path.join(folder, regex)):
        if not os.path.isfile(path):
            continue
        with open(path, 'r') as fileP:
            md5_hash = hashlib.md5(fileP.read()).digest()
        file_name = os.path.basename(path)
        file_hashes[file_name] = urlsafe_b64encode(md5_hash)
    return file_hashes",0.0,0.0,0.0,1.0,1.0,0.7438058853149414,-0.05156053602695465,0.07626701891422272,0.8554560542106628,1.565096378326416,1.0,1.6239684224128723,1.0,2.0
"def get(self, path_info):
        assert path_info[""scheme""] == ""local""
        path = path_info[""path""]
        if not os.path.exists(path):
            return None
        actual_mtime, actual_size = get_mtime_and_size(path)
        actual_inode = get_inode(path)
        existing_record = self.get_state_record_for_inode(actual_inode)
        if not existing_record:
            return None
        mtime, size, checksum, _ = existing_record
        if self._file_metadata_changed(actual_mtime, mtime, actual_size, size):
            return None
        self._update_state_record_timestamp_for_inode(actual_inode)
        return checksum",0.0,1.0,1.0,0.0,2.0,0.6466572880744934,-4.681292921304703e-05,0.1482810527086258,0.7735661268234253,1.5065975189208984,2.0,1.5684576546773314,2.0,2.0
"def search_people_by_bio(query, limit_results=DEFAULT_LIMIT,
                         index=['onename_people_index']):
    from pyes import QueryStringQuery, ES
    conn = ES()
    q = QueryStringQuery(query,
                         search_fields=['username', 'profile_bio'],
                         default_operator='and')
    results = conn.search(query=q, size=20, indices=index)
    count = conn.count(query=q)
    count = count.count
    if(count == 0):
        q = QueryStringQuery(query,
                             search_fields=['username', 'profile_bio'],
                             default_operator='or')
        results = conn.search(query=q, size=20, indices=index)
    results_list = []
    counter = 0
    for profile in results:
        username = profile['username']
        results_list.append(username)
        counter += 1
        if(counter == limit_results):
            break
    return results_list",1.0,0.0,1.0,1.0,3.0,0.8509528040885925,-0.08858898282051086,0.9343619346618652,1.0002995729446411,2.9234752655029297,3.0,2.697025328874588,3.0,3.0
"def create(self, client=None):
        if self.notification_id is not None:
            raise ValueError(
                ""Notification already exists w/ id: {}"".format(self.notification_id)
            )
        client = self._require_client(client)
        query_params = {}
        if self.bucket.user_project is not None:
            query_params[""userProject""] = self.bucket.user_project
        path = ""/b/{}/notificationConfigs"".format(self.bucket.name)
        properties = self._properties.copy()
        properties[""topic""] = _TOPIC_REF_FMT.format(self.topic_project, self.topic_name)
        self._properties = client._connection.api_request(
            method=""POST"", path=path, query_params=query_params, data=properties
        )",1.0,0.0,0.0,2.0,3.0,1.1873393058776855,0.11456043273210526,0.12099456787109375,1.0150065422058105,2.649789571762085,3.0,2.437900848686695,3.0,3.0
"def ip_address_add(session, ifname, ifaddr):
    def _append_inet_addr(intf_inet, addr):
        addr_list = intf_inet.split(',')
        if addr in addr_list:
            LOG.debug(
                'Interface ""%s"" has already ""ifaddr"": %s',
                intf.ifname, addr)
            return intf_inet
        else:
            addr_list.append(addr)
            return ','.join(addr_list)
    intf = ip_link_show(session, ifname=ifname)
    if not intf:
        LOG.debug('Interface ""%s"" does not exist', ifname)
        return None
    if ip.valid_ipv4(ifaddr):
        intf.inet = _append_inet_addr(intf.inet, ifaddr)
    elif ip.valid_ipv6(ifaddr):
        intf.inet6 = _append_inet_addr(intf.inet6, ifaddr)
    else:
        LOG.debug('Invalid IP address for ""ifaddr"": %s', ifaddr)
        return None
    return intf",1.0,0.0,0.0,1.0,2.0,0.9330535531044006,0.09630082547664642,0.2780880331993103,0.840251624584198,2.4099056720733643,2.0,2.1476940363645554,2.0,2.0
"def statuses_home_timeline(self, count=None, since_id=None, max_id=None,
                               trim_user=None, exclude_replies=None,
                               contributor_details=None,
                               include_entities=None):
        params = {}
        set_int_param(params, 'count', count)
        set_str_param(params, 'since_id', since_id)
        set_str_param(params, 'max_id', max_id)
        set_bool_param(params, 'trim_user', trim_user)
        set_bool_param(params, 'exclude_replies', exclude_replies)
        set_bool_param(params, 'contributor_details', contributor_details)
        set_bool_param(params, 'include_entities', include_entities)
        return self._get_api('statuses/home_timeline.json', params)",2.0,0.0,0.0,1.0,3.0,1.3563810586929321,-0.05847395956516266,0.09259630739688873,1.0785839557647705,2.7709460258483887,3.0,2.4690873622894287,3.0,3.0
"def _detect_sudo(self, _execnet=None):
        exc = _execnet or execnet
        gw = exc.makegateway(
            self._make_connection_string(self.hostname, use_sudo=False)
        )
        channel = gw.remote_exec(
            'import getpass; channel.send(getpass.getuser())'
        )
        result = channel.receive()
        gw.exit()
        if result == 'root':
            return False
        self.logger.debug('connection detected need for sudo')
        return True",1.0,0.0,0.0,0.0,1.0,0.9645476937294006,0.024064771831035614,0.05178050696849823,0.8877094388008118,1.970119833946228,1.0,1.9281024113297462,1.0,2.0
"def tissue_specificity(self, comment=None, entry_name=None, limit=None, as_df=False):
        q = self.session.query(models.TissueSpecificity)
        q = self.get_model_queries(q, ((comment, models.TissueSpecificity.comment),))
        q = self.get_one_to_many_queries(q, ((entry_name, models.Entry.name),))
        return self._limit_and_df(q, limit, as_df)",1.0,0.0,1.0,1.0,3.0,0.7176470160484314,-0.15512043237686157,0.8595573902130127,0.9370938539505005,2.6516435146331787,3.0,2.359177827835083,3.0,3.0
"def validate(self, messages):
        messages = self.validate_version(messages)
        messages = self.validate_data_lics(messages)
        messages = self.validate_name(messages)
        messages = self.validate_spdx_id(messages)
        messages = self.validate_namespace(messages)
        messages = self.validate_ext_document_references(messages)
        messages = self.validate_creation_info(messages)
        messages = self.validate_package(messages)
        messages = self.validate_extracted_licenses(messages)
        messages = self.validate_reviews(messages)
        return messages",0.0,0.0,0.0,1.0,1.0,0.8841940760612488,-0.09113015234470367,0.1244334876537323,0.9257459044456482,1.969525694847107,1.0,1.8432433158159256,1.0,2.0
"def init(db_url, alembic_ini=None, debug=False, create=False):
    engine = create_engine(db_url, echo=debug)
    if create:
        BASE.metadata.create_all(engine)
    if alembic_ini is not None:
        from alembic.config import Config
        from alembic import command
        alembic_cfg = Config(alembic_ini)
        command.stamp(alembic_cfg, ""head"")
    scopedsession = scoped_session(sessionmaker(bind=engine))
    return scopedsession",1.0,1.0,1.0,1.0,4.0,0.7187513113021851,0.24382777512073517,0.3974149227142334,0.6497431993484497,2.030714511871338,4.0,2.0097372084856033,4.0,2.0
"def save(self):
        with Repo.db:
            self._do_save()
            our_name = inflector.singularize(Repo.table_name(self.__class__))
            for record in self._related_records:
                if not self._id:
                    related_key = associations.foreign_keys_for(
                        record.__class__)[our_name]
                    setattr(record, related_key, self.__id)
                record._do_save()
            for record in self._delete_related_records:
                record._do_destroy()
        self._finish_save()",1.0,1.0,1.0,0.0,3.0,0.0943334624171257,0.435404896736145,0.7230503559112549,0.40538379549980164,1.7165639400482178,3.0,1.6581725105643272,3.0,2.0
"def setUsers(self, *args, **kwargs):
        try:
            usrs = [ us for us in self.mambuusersclass(branchId=self['id'], *args, **kwargs) if us['userState'] == ""ACTIVE"" ]
        except AttributeError as ae:
            from .mambuuser import MambuUsers
            self.mambuusersclass = MambuUsers
            usrs = [ us for us in self.mambuusersclass(branchId=self['id'], *args, **kwargs) if us['userState'] == ""ACTIVE"" ]
        self['users'] = usrs
        return 1",2.0,0.0,0.0,0.0,2.0,1.007851243019104,0.036319948732852936,0.25618523359298706,1.0283198356628418,2.477635145187378,2.0,2.328676261007786,2.0,2.0
"def disease_comment(self, comment=None, entry_name=None, limit=None, as_df=False):
        q = self.session.query(models.DiseaseComment)
        q = self.get_model_queries(q, ((comment, models.DiseaseComment.comment),))
        q = self.get_one_to_many_queries(q, ((entry_name, models.Entry.name),))
        return self._limit_and_df(q, limit, as_df)",1.0,0.0,1.0,1.0,3.0,0.6667652726173401,-0.16439875960350037,0.8829278945922852,0.9323160648345947,2.679300308227539,3.0,2.3176104724407196,3.0,3.0
"def can_create_gradebook_with_record_types(self, gradebook_record_types):
        if self._catalog_session is not None:
            return self._catalog_session.can_create_catalog_with_record_types(catalog_record_types=gradebook_record_types)
        return True",1.0,0.0,0.0,1.0,2.0,1.0341405868530273,-0.010138464160263538,0.09609140455722809,1.0048378705978394,2.2728075981140137,2.0,2.1249313978478312,2.0,2.0
"def scan(self, cursor=0, pattern=None, count=None):
        def format_response(value):
            return int(value[0]), value[1]
        command = [b'SCAN', ascii(cursor).encode('ascii')]
        if pattern:
            command += [b'MATCH', pattern]
        if count:
            command += [b'COUNT', ascii(count).encode('ascii')]
        return self._execute(command, format_callback=format_response)",1.0,0.0,0.0,1.0,2.0,0.9373783469200134,-0.07357969135046005,0.06262919306755066,0.9301662445068359,2.0147995948791504,2.0,1.85659409314394,2.0,2.0
"def make_error_redirect(self, authorization_error=None):
    if not self.redirect_uri:
      return HttpResponseRedirect(self.missing_redirect_uri)
    authorization_error = (authorization_error or
                           AccessDenied('user denied the request'))
    response_params = get_error_details(authorization_error)
    if self.state is not None:
      response_params['state'] = self.state
    return HttpResponseRedirect(
        update_parameters(self.redirect_uri, response_params))",0.0,0.0,0.0,1.0,1.0,1.057178258895874,-0.007814311422407627,0.04360558092594147,0.9969110488891602,2.1044461727142334,1.0,2.089880577288568,1.0,2.0
"def list(self, max=None, **request_parameters):
        check_type(max, int)
        params = dict_from_items_with_values(
            request_parameters,
            max=max,
        )
        items = self._session.get_items(API_ENDPOINT, params=params)
        for item in items:
            yield self._object_factory(OBJECT_TYPE, item)",2.0,0.0,0.0,1.0,3.0,1.5162681341171265,-0.13862822949886322,0.1548539102077484,1.0565946102142334,3.0145037174224854,3.0,2.589088425040245,3.0,3.0
"def language_list(
        maintenance_db,
        user=None,
        host=None,
        port=None,
        password=None,
        runas=None):
    ret = {}
    query = 'SELECT lanname AS ""Name"" FROM pg_language'
    rows = psql_query(
        query,
        runas=runas,
        host=host,
        user=user,
        port=port,
        maintenance_db=maintenance_db,
        password=password)
    for row in rows:
        ret[row['Name']] = row['Name']
    return ret",1.0,0.0,1.0,1.0,3.0,0.6653490662574768,0.14209719002246857,0.6569089889526367,0.7604749202728271,2.416607618331909,3.0,2.2248301655054092,3.0,2.0
"def select_token(request, scopes='', new=False):
    @tokens_required(scopes=scopes, new=new)
    def _token_list(r, tokens):
        context = {
            'tokens': tokens,
            'base_template': app_settings.ESI_BASE_TEMPLATE,
        }
        return render(r, 'esi/select_token.html', context=context)
    return _token_list(request)",1.0,0.0,0.0,1.0,2.0,1.2486720085144043,-0.014786829240620136,0.13684602081775665,1.006548285484314,2.577768087387085,2.0,2.377279485575855,2.0,3.0
"def get_ftp(ftp_conf, debug=0):
    server = ftp_conf.get('server')
    user = ftp_conf.get('user')
    password = ftp_conf.get('password')
    start_path = ftp_conf.get('start_path')
    slog.info(""Connecting FTP server %s ......"", server)
    ftpStr = 'ftp://%s/'%server
    if start_path:
        ftpStr = ftpStr+start_path
    ftp = ftplib.FTP(server, user, password)
    ftp.set_debuglevel(debug)
    if start_path:
        ftp.cwd(start_path)
    serverFiles = ftp.nlst()
    slog.info('There are some files in %s:\n[%s]'%(ftpStr, ', '.join(serverFiles)))
    return ftp, ftpStr",1.0,0.0,0.0,0.0,1.0,1.1166625022888184,0.044878169894218445,0.03500749170780182,0.8902577757835388,2.100884437561035,1.0,2.0868059396743774,1.0,2.0
"def insert(key, value):
    value = pickle.dumps(value, protocol=constants.PICKLE_PROTOCOL)
    doc = {
        KEY_FIELD: key,
        VALUE_FIELD: Binary(value)
    }
    try:
        return collection.insert(doc)
    except pymongo.errors.DuplicateKeyError:
        return None",0.0,1.0,0.0,0.0,1.0,0.3493664562702179,0.30359140038490295,0.5615730881690979,0.6082214713096619,1.892594814300537,1.0,1.8227524161338806,1.0,2.0
"def trap(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        sys.stdall = CarbonCopy()
        my_stdout, sys.stdout = sys.stdout, CarbonCopy(cc=sys.stdall)
        my_stderr, sys.stderr = sys.stderr, CarbonCopy(cc=sys.stdall)
        try:
            return func(*args, **kwargs)
        finally:
            sys.stdout = my_stdout
            sys.stderr = my_stderr
            del sys.stdall
    return wrapper",0.0,0.0,0.0,1.0,1.0,0.8332194089889526,0.03482905030250549,0.005675151944160461,0.8347470164299011,1.6337759494781494,1.0,1.7084706276655197,1.0,2.0
"def get_graph_csv():
    assert request.method == ""POST"", ""POST request expected received {}"".format(request.method)
    if request.method == ""POST"":
        try:
            selected_variable_table = request.form[""selected_variable_table""]
            filename = utils.generate_graph_csv(selected_variable_table)
            return send_file(filename, as_attachment=True, attachment_filename='{}.csv'.format(selected_variable_table))
        except Exception as e:
            logging.error(e)
    return jsonify({""0"": ""__EMPTY""})",1.0,0.0,0.0,1.0,2.0,0.9090814590454102,0.02746189385652542,0.03978370502591133,0.8519726395606995,2.057457685470581,2.0,1.8282996974885464,2.0,2.0
"def _update_database_helper_table(
            self):
        self.log.debug('starting the ``_update_database_helper_table`` method')
        tableName = self.dbTableName
        sqlQuery = u % locals()
        writequery(
            log=self.log,
            sqlQuery=sqlQuery,
            dbConn=self.cataloguesDbConn,
        )
        self.log.debug(
            'completed the ``_update_database_helper_table`` method')
        return None",0.0,1.0,0.0,0.0,1.0,0.5309152603149414,0.17615430057048798,0.26150792837142944,0.6572325825691223,1.6936649084091187,1.0,1.6258100718259811,1.0,2.0
"def requestCheckDockerIo(origAppliance, imageName, tag):
    if '/' not in imageName:
        imageName = 'library/' + imageName
    token_url = 'https://auth.docker.io/token?service=registry.docker.io&scope=repository:{repo}:pull'.format(repo=imageName)
    requests_url = 'https://registry-1.docker.io/v2/{repo}/manifests/{tag}'.format(repo=imageName, tag=tag)
    token = requests.get(token_url)
    jsonToken = token.json()
    bearer = jsonToken[""token""]
    response = requests.head(requests_url, headers={'Authorization': 'Bearer {}'.format(bearer)})
    if not response.ok:
        raise ApplianceImageNotFound(origAppliance, requests_url, response.status_code)
    else:
        return origAppliance",1.0,0.0,0.0,1.0,2.0,1.60970139503479,0.03351185470819473,0.08131441473960876,1.009285569190979,2.8693182468414307,2.0,2.7338132336735725,2.0,3.0
"def getFieldsForActiveJobsOfType(self, jobType, fields=[]):
    dbFields = [self._jobs.pubToDBNameDict[x] for x in fields]
    dbFieldsStr = ','.join(['job_id'] + dbFields)
    with ConnectionFactory.get() as conn:
      query = \
        'SELECT DISTINCT %s ' \
        'FROM %s j ' \
        'LEFT JOIN %s m USING(job_id) '\
        'WHERE j.status != %%s ' \
          'AND _eng_job_type = %%s' % (dbFieldsStr, self.jobsTableName,
            self.modelsTableName)
      conn.cursor.execute(query, [self.STATUS_COMPLETED, jobType])
      return conn.cursor.fetchall()",0.0,0.0,1.0,0.0,1.0,0.34365981817245483,0.08786755055189133,0.6964969038963318,0.593421459197998,2.145911693572998,1.0,1.721445731818676,1.0,2.0
"async def answer_pre_checkout_query(self, pre_checkout_query_id: base.String, ok: base.Boolean,
                                        error_message: typing.Union[base.String, None] = None) -> base.Boolean:
        payload = generate_payload(**locals())
        result = await self.request(api.Methods.ANSWER_PRE_CHECKOUT_QUERY, payload)
        return result",2.0,0.0,0.0,1.0,3.0,1.1340713500976562,-0.0352625846862793,-0.049331989139318466,1.1710468530654907,2.4370992183685303,3.0,2.220523629337549,3.0,2.0
"def checkUserAccess(self):
        allowed = True
        pm = getToolByName(self, ""portal_membership"")
        member = pm.getAuthenticatedMember()
        analyst = self.getAnalyst().strip()
        if analyst != _c(member.getId()):
            roles = member.getRoles()
            restrict = 'Manager' not in roles \
                and 'LabManager' not in roles \
                and 'LabClerk' not in roles \
                and 'RegulatoryInspector' not in roles \
                and self.bika_setup.getRestrictWorksheetUsersAccess()
            allowed = not restrict
        return allowed",2.0,0.0,1.0,1.0,4.0,0.9995460510253906,-0.06829015910625458,0.32143858075141907,0.9527509808540344,2.342918634414673,4.0,2.2054454535245895,4.0,2.0
"def lcopt_bw2_setup(ecospold_path, overwrite=False, db_name=None):
    default_ei_name = ""Ecoinvent3_3_cutoff""
    if db_name is None:
        db_name = DEFAULT_PROJECT_STEM + default_ei_name
    if db_name in bw2.projects:
        if overwrite:
            bw2.projects.delete_project(name=db_name, delete_dir=True)
        else:
            print('Looks like bw2 is already set up - if you want to overwrite the existing version run lcopt.utils.lcopt_bw2_setup in a python shell using overwrite = True')
            return False
    bw2.projects.set_current(db_name)
    bw2.bw2setup()
    ei = bw2.SingleOutputEcospold2Importer(fix_mac_path_escapes(ecospold_path), default_ei_name)
    ei.apply_strategies()
    ei.statistics()
    ei.write_database()
    return True",1.0,0.0,0.0,0.0,1.0,0.7936346530914307,0.0500340610742569,0.04427791014313698,0.812091588973999,1.653024673461914,1.0,1.7000382132828236,1.0,2.0
"def refresh_db(jail=None, chroot=None, root=None, force=False, **kwargs):
    salt.utils.pkg.clear_rtag(__opts__)
    cmd = _pkg(jail, chroot, root)
    cmd.append('update')
    if force:
        cmd.append('-f')
    return __salt__['cmd.retcode'](cmd, python_shell=False) == 0",1.0,0.0,0.0,1.0,2.0,0.8432607650756836,0.03210932016372681,0.0702630877494812,0.8414360880851746,1.8683528900146484,2.0,1.7870692610740662,2.0,2.0
"def multiple_choice(question, choices, answers):
    if not isinstance(answers, (int, collections.Iterable)):
        raise TypeError(
            'The `answers` arg is expected to be of type '
            '(int | iterable int) but got {} instead.'.format(type(answers))
        )
    @curry
    def check_answer(index, button):
        is_correct = (
            index == answers if isinstance(answers, int) else index in answers
        )
        button.style.button_color = GREEN if is_correct else RED
    answer_choices = []
    for index, choice in enumerate(choices):
        button = widgets.Button(
            layout=widgets.Layout(width='20px', height='20px', padding='0')
        )
        button.on_click(check_answer(index))
        button_and_question = widgets.HBox(
            [button, widgets.HTML(TEXT_STYLE.format(choice))],
            layout=widgets.Layout(align_items='center')
        )
        answer_choices.append(button_and_question)
    question_html = [widgets.HTML(TEXT_STYLE.format(question))]
    display(widgets.VBox(question_html + answer_choices))",1.0,0.0,0.0,1.0,2.0,0.8795607089996338,-0.07923015207052231,0.02090642973780632,0.962027370929718,1.7215250730514526,2.0,1.7832643575966358,2.0,2.0
"def accel_quit(self, *args):
        procs = self.notebook_manager.get_running_fg_processes_count()
        tabs = self.notebook_manager.get_n_pages()
        notebooks = self.notebook_manager.get_n_notebooks()
        prompt_cfg = self.settings.general.get_boolean('prompt-on-quit')
        prompt_tab_cfg = self.settings.general.get_int('prompt-on-close-tab')
        if prompt_cfg or (prompt_tab_cfg == 1 and procs > 0) or (prompt_tab_cfg == 2):
            log.debug(""Remaining procs=%r"", procs)
            if PromptQuitDialog(self.window, procs, tabs, notebooks).quit():
                log.info(""Quitting Guake"")
                Gtk.main_quit()
        else:
            log.info(""Quitting Guake"")
            Gtk.main_quit()",1.0,0.0,0.0,0.0,1.0,0.9593486785888672,-0.02232542634010315,0.09856081008911133,0.9334732890129089,1.9532963037490845,1.0,1.9690573513507843,1.0,2.0
"def begin(self, user_url, anonymous=False):
        disco = Discovery(self.session, user_url, self.session_key_prefix)
        try:
            service = disco.getNextService(self._discover)
        except fetchers.HTTPFetchingError as why:
            raise DiscoveryFailure('Error fetching XRDS document: %s' %
                                   (why.why, ), None)
        if service is None:
            raise DiscoveryFailure('No usable OpenID services found for %s' %
                                   (user_url, ), None)
        else:
            return self.beginWithoutDiscovery(service, anonymous)",2.0,0.0,0.0,1.0,3.0,1.1896051168441772,-0.0616113543510437,0.25148284435272217,0.9738556742668152,2.419210195541382,3.0,2.353332281112671,3.0,2.0
"def FullJournalName(self):
        global abbrevDict
        if abbrevDict is None:
            abbrevDict = getj9dict()
        if self.isJournal():
            return abbrevDict[self.journal][0]
        else:
            return None",1.0,0.0,1.0,1.0,3.0,0.7351924777030945,-0.053072310984134674,0.006888382136821747,0.8411953449249268,1.570470929145813,3.0,1.5302038937807083,3.0,2.0
"def enroll(session, uidentity, organization,
           from_date=MIN_PERIOD_DATE, to_date=MAX_PERIOD_DATE):
    if not from_date:
        raise ValueError(""'from_date' cannot be None"")
    if not to_date:
        raise ValueError(""'to_date' cannot be None"")
    if from_date < MIN_PERIOD_DATE or from_date > MAX_PERIOD_DATE:
        raise ValueError(""'from_date' %s is out of bounds"" % str(from_date))
    if to_date < MIN_PERIOD_DATE or to_date > MAX_PERIOD_DATE:
        raise ValueError(""'to_date' %s is out of bounds"" % str(to_date))
    if from_date > to_date:
        raise ValueError(""'from_date' %s cannot be greater than %s""
                         % (from_date, to_date))
    enrollment = Enrollment(uidentity=uidentity,
                            organization=organization,
                            start=from_date, end=to_date)
    uidentity.last_modified = datetime.datetime.utcnow()
    session.add(enrollment)
    return enrollment",0.0,1.0,0.0,1.0,2.0,0.9445067048072815,-0.006635219790041447,0.11986863613128662,0.8928993344306946,2.0375733375549316,2.0,1.9506394555792212,2.0,2.0
"def clear_cache(temp_dir=None):
    with memory_lock:
        _module_values['last_update'] = None
        _module_values['certs'] = None
    ca_path, temp = _ca_path(temp_dir)
    if temp:
        with path_lock:
            if os.path.exists(ca_path):
                os.remove(ca_path)",1.0,0.0,0.0,0.0,1.0,0.6923527717590332,0.07061049342155457,0.08976519107818604,0.7645074129104614,1.557395100593567,1.0,1.6172358691692352,1.0,2.0
"def send_image_message(self, user_id, media_id):
        return self.request.post(
            url='https://api.weixin.qq.com/cgi-bin/message/custom/send',
            data={
                'touser': user_id,
                'msgtype': 'image',
                'image': {
                    'media_id': media_id,
                },
            }
        )",2.0,0.0,0.0,1.0,3.0,1.386701226234436,-0.04880366101861,-0.1319046914577484,1.1969636678695679,2.9556736946105957,3.0,2.4029565416276455,3.0,3.0
"def get_user(self, user_id=None, username=None, email=None):
        if user_id:
            uri = ""/users/%s"" % user_id
        elif username:
            uri = ""/users?name=%s"" % username
        elif email:
            uri = ""/users?email=%s"" % email
        else:
            raise ValueError(""You must include one of 'user_id', ""
                    ""'username', or 'email' when calling get_user()."")
        resp, resp_body = self.method_get(uri)
        if resp.status_code == 404:
            raise exc.NotFound(""No such user exists."")
        users = resp_body.get(""users"", [])
        if users:
            return [User(self, user) for user in users]
        else:
            user = resp_body.get(""user"", {})
            if user:
                return User(self, user)
            else:
                raise exc.NotFound(""No such user exists."")",2.0,0.0,0.0,2.0,4.0,1.6807527542114258,-0.03439340740442276,0.06182723119854927,1.0981427431106567,3.02929425239563,4.0,2.806329321116209,4.0,3.0
"def has_perm(self, user, perm, obj=None, *args, **kwargs):
        try:
            if not self._obj_ok(obj):
                if hasattr(obj, 'get_permissions_object'):
                    obj = obj.get_permissions_object(perm)
                else:
                    raise InvalidPermissionObjectException
            return user.permset_tree.allow(Action(perm), obj)
        except ObjectDoesNotExist:
            return False",1.0,0.0,1.0,1.0,3.0,0.8128243684768677,-0.07408132404088974,0.5457356572151184,0.9651471376419067,2.2396609783172607,3.0,2.249625839293003,3.0,2.0
"def reload(self, client=None):
        client = self._require_client(client)
        query_params = self._query_params
        query_params[""projection""] = ""noAcl""
        api_response = client._connection.api_request(
            method=""GET"",
            path=self.path,
            query_params=query_params,
            headers=self._encryption_headers(),
            _target_object=self,
        )
        self._set_properties(api_response)",1.0,0.0,0.0,1.0,2.0,1.1371948719024658,-0.04028002545237541,0.12281075119972229,0.9585345387458801,2.414091110229492,2.0,2.178260136395693,2.0,2.0
"def readable(value,
             allow_empty = False,
             **kwargs):
    if not value and not allow_empty:
        raise errors.EmptyValueError('value (%s) was empty' % value)
    elif not value:
        return None
    value = file_exists(value, force_run = True)
    try:
        with open(value, mode='r'):
            pass
    except (OSError, IOError):
        raise errors.NotReadableError('file at %s could not be opened for '
                                      'reading' % value)
    return value",1.0,0.0,0.0,0.0,1.0,0.8547699451446533,-0.01311404351145029,-0.0018117092549800873,0.8897647857666016,1.6555476188659668,1.0,1.7296089781448245,1.0,2.0
"def list_user_comments(self, topic_id, user_alias=None):
        user_alias = user_alias or self.api.user_alias
        comment_start = 0
        results = []
        while comment_start is not None:
            comments = self.list_comments(topic_id, comment_start)
            results += [item for item in comments['results'] if item['author_alias'] == user_alias]
            comment_start = comments['next_start']
        return results",2.0,0.0,0.0,1.0,3.0,1.7719632387161255,-0.1289411038160324,0.22239311039447784,1.1538296937942505,3.303443193435669,3.0,3.0192449390888214,3.0,3.0
"def showPerformance(self):
        if len(self.inputs) == 0:
            print('no patterns to test')
            return
        self.setContext()
        while True:
            BackpropNetwork.showPerformance(self)
            if self.quitFromSweep:
                return",1.0,0.0,0.0,1.0,2.0,0.9726104140281677,-0.046980395913124084,0.02268237993121147,0.956330418586731,1.9496431350708008,2.0,1.904642816632986,2.0,2.0
"def generate_pdf_report(self, impact_function, iface, scenario_name):
        output_dir = self.output_directory.text()
        file_path = os.path.join(output_dir, scenario_name)
        table_report_metadata = ReportMetadata(
            metadata_dict=standard_impact_report_metadata_pdf)
        impact_table_report = ImpactReport(
            iface,
            table_report_metadata,
            impact_function=impact_function)
        impact_table_report.output_folder = file_path
        impact_table_report.process_components()
        map_report_metadata = ReportMetadata(
            metadata_dict=update_template_component(map_report))
        impact_map_report = ImpactReport(
            iface,
            map_report_metadata,
            impact_function=impact_function)
        impact_map_report.qgis_composition_context.extent = \
            impact_function.impact.extent()
        impact_map_report.output_folder = file_path
        impact_map_report.process_components()",1.0,0.0,0.0,1.0,2.0,0.7771245241165161,-0.06531599164009094,0.0403328537940979,0.8942622542381287,1.6897022724151611,2.0,1.6464036405086517,2.0,2.0
"def register(self, email, username, password, first_name, last_name, birthday=""1974-11-20"", captcha_result=None):
        self.username = username
        self.password = password
        register_message = sign_up.RegisterRequest(email, username, password, first_name, last_name, birthday, captcha_result,
                                                   self.device_id_override, self.android_id_override)
        log.info(""[+] Sending sign up request (name: {} {}, email: {})..."".format(first_name, last_name, email))
        return self._send_xmpp_element(register_message)",1.0,0.0,0.0,1.0,2.0,1.0790345668792725,0.01934605836868286,-0.030691470950841904,1.0449987649917603,2.350888967514038,2.0,2.1126879192888737,2.0,2.0
"def add_editor(self, username, _delete=False, *args, **kwargs):
        url = self.reddit_session.config['wiki_page_editor']
        url = url.format(subreddit=six.text_type(self.subreddit),
                         method='del' if _delete else 'add')
        data = {'page': self.page,
                'username': six.text_type(username)}
        return self.reddit_session.request_json(url, data=data, *args,
                                                **kwargs)",1.0,0.0,0.0,1.0,2.0,1.4126620292663574,-0.015565232373774052,-0.011903297156095505,1.117681860923767,2.8169596195220947,2.0,2.502875360660255,2.0,3.0
"def user_func(func, arg_types=None, return_type=None):
    class UserFunction(std_core.TypedFunction):
        name = func.__name__
        def __call__(self, *args, **kwargs):
            return func(*args, **kwargs)
        @classmethod
        def reflect_static_args(cls):
            return arg_types
        @classmethod
        def reflect_static_return(cls):
            return return_type
    return UserFunction()",0.0,0.0,0.0,0.0,0.0,0.7702542543411255,-0.08412427455186844,0.020145591348409653,0.9044545888900757,1.502997636795044,0.0,1.6107301600277424,0.0,2.0
"def interactive(self, bConfirmQuit = True, bShowBanner = True):
        print('')
        print(""-"" * 79)
        print(""Interactive debugging session started."")
        print(""Use the \""help\"" command to list all available commands."")
        print(""Use the \""quit\"" command to close this session."")
        print(""-"" * 79)
        if self.lastEvent is None:
            print('')
        console = ConsoleDebugger()
        console.confirm_quit = bConfirmQuit
        console.load_history()
        try:
            console.start_using_debugger(self)
            console.loop()
        finally:
            console.stop_using_debugger()
            console.save_history()
        print('')
        print(""-"" * 79)
        print(""Interactive debugging session closed."")
        print(""-"" * 79)
        print('')",1.0,0.0,0.0,1.0,2.0,1.0614005327224731,-0.004984886385500431,0.014345064759254456,0.9096933603286743,2.033869981765747,2.0,1.9804540714249015,2.0,2.0
"def update(self, friendly_name=values.unset, log_queries=values.unset,
               unique_name=values.unset, callback_url=values.unset,
               callback_events=values.unset, fallback_actions=values.unset,
               initiation_actions=values.unset, style_sheet=values.unset):
        return self._proxy.update(
            friendly_name=friendly_name,
            log_queries=log_queries,
            unique_name=unique_name,
            callback_url=callback_url,
            callback_events=callback_events,
            fallback_actions=fallback_actions,
            initiation_actions=initiation_actions,
            style_sheet=style_sheet,
        )",1.0,1.0,0.0,1.0,3.0,0.8968712091445923,0.014037913642823696,0.13784585893154144,1.0083545446395874,2.084343433380127,3.0,2.057109526358545,3.0,2.0
"def read_volume_attachment(self, name, **kwargs):
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_volume_attachment_with_http_info(name, **kwargs)
        else:
            (data) = self.read_volume_attachment_with_http_info(name, **kwargs)
            return data",2.0,0.0,0.0,1.0,3.0,1.368669033050537,-0.02439705654978752,-0.05063488706946373,1.093239188194275,2.6613659858703613,3.0,2.3868762776255608,3.0,3.0
"def get_pullrequest(self, project, repository, pull_request_id):
        url = 'rest/api/1.0/projects/{project}/repos/{repository}/pull-requests/{pullRequestId}'.format(project=project,
                                                                                                        repository=repository,
                                                                                                        pullRequestId=pull_request_id)
        return self.get(url)",2.0,0.0,0.0,1.0,3.0,1.5696656703948975,-0.09662988036870956,-0.025650519877672195,1.0436515808105469,2.8009345531463623,3.0,2.4910368509590626,3.0,3.0
"def get_float(prompt=None):
    while True:
        s = get_string(prompt)
        if s is None:
            return None
        if len(s) > 0 and re.search(r""^[+-]?\d*(?:\.\d*)?$"", s):
            try:
                return float(s)
            except ValueError:
                pass
        if prompt is None:
            print(""Retry: "", end="""")",1.0,0.0,0.0,1.0,2.0,0.9371348023414612,-0.07807126641273499,-0.02936771884560585,0.9511681199073792,1.7928788661956787,2.0,1.7808639369904995,2.0,2.0
"def has_any_roles(self, *roles):
        roles = map(utils.slugify, list(roles))
        return True \
            if AuthUserRole.query() \
            .join(AuthUser) \
            .filter(AuthUserRole.name.in_(roles)) \
            .filter(AuthUser.id == self.id) \
            .count() \
            else False",1.0,0.0,1.0,0.0,2.0,0.8941693902015686,-0.05720973759889603,0.7630440592765808,0.9396806359291077,2.892477512359619,2.0,2.539684347808361,2.0,3.0
"def restore(self, password, db, dump, copy=False):
        if dump.closed:
            raise error.InternalError(""Dump file closed"")
        b64_data = base64.standard_b64encode(dump.read()).decode()
        self._odoo.json(
            '/jsonrpc',
            {'service': 'db',
             'method': 'restore',
             'args': [password, db, b64_data, copy]})",1.0,1.0,0.0,1.0,3.0,0.9545657634735107,0.0360751673579216,0.017007052898406982,0.9076120257377625,2.1597063541412354,3.0,1.9152600094676018,3.0,2.0
"def epost(database, ids: List[str], webenv=False, api_key=False, email=False, **kwargs) -> Optional[EpostResult]:
    url = BASE_URL + f'epost.fcgi'
    id = ','.join(ids)
    url_params = f'db={database}&id={id}'
    url_params = check_webenv(webenv, url_params)
    url_params = check_api_key(api_key, url_params)
    url_params = check_email(email, url_params)
    resp = entrez_try_put_multiple_times(url, url_params, num_tries=3)
    time.sleep(.5)
    return parse_epost(resp.text)",0.0,0.0,0.0,1.0,1.0,1.347541093826294,0.024897530674934387,0.10101866722106934,1.0124720335006714,2.7613513469696045,1.0,2.485929325222969,1.0,3.0
"def permission_check(data, command_permissions,
                     command=None, permissions=None):
    if permissions:
        pass
    elif command:
        if hasattr(command, 'permissions'):
            permissions = command.permissions
        else:
            return True
    else:
        msg = ""{name} must be called with command or permissions argument""
        raise RuntimeError(msg.format(name=""_permission_check""))
    return any(data['sender']['id'] in command_permissions[permission]
               for permission in permissions
               if permission in command_permissions)",1.0,0.0,0.0,1.0,2.0,0.8750603199005127,-0.07598225772380829,0.02899780496954918,0.9683840870857239,1.6883541345596313,2.0,1.7964599542319775,2.0,2.0
"def server_error(request, template_name='500.html'):
    try:
        rendered_page = get_response_page(
            request,
            http.HttpResponseServerError,
            'icekit/response_pages/500.html',
            abstract_models.RESPONSE_HTTP500
        )
        if rendered_page is not None:
            return rendered_page
    except Exception:
        pass
    return defaults.server_error(request, template_name)",0.0,0.0,1.0,1.0,2.0,0.9345700740814209,-0.08969470113515854,0.038782957941293716,0.9604378342628479,1.9766596555709839,2.0,1.844096165150404,2.0,2.0
"def send_inline_bot_result(
        self,
        chat_id: Union[int, str],
        query_id: int,
        result_id: str,
        disable_notification: bool = None,
        reply_to_message_id: int = None,
        hide_via: bool = None
    ):
        return self.send(
            functions.messages.SendInlineBotResult(
                peer=self.resolve_peer(chat_id),
                query_id=query_id,
                id=result_id,
                random_id=self.rnd_id(),
                silent=disable_notification or None,
                reply_to_msg_id=reply_to_message_id,
                hide_via=hide_via or None
            )
        )",2.0,0.0,0.0,2.0,4.0,1.1719149351119995,-0.08543059229850769,0.06664953380823135,1.1049915552139282,2.5339925289154053,4.0,2.2581254318356514,4.0,3.0
